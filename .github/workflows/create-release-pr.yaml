name: Create or update release PR

on:
  pull_request:
    types: [edited]
    branches:
      - main
  push:
    branches:
      - develop

jobs:
  create-release-pr:
    name: Create or update release PR
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Save branch name output
        shell: bash
        run: echo "branchName=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: current-branch-name

      - name: Create release PR or get existing PR ID
        id: get-pr
        uses: actions/github-script@v5
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            /* We already have the id if this is a PR edit event: */
            const editedIdMatch = context.ref.match(/^refs\/pull\/(\d+)\//);
            const editedId = editedIdMatch ? editedIdMatch[1] : null;
            if (editedId) {
              return editedId;
            }

            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const triggeringRefHead = context.ref.split('/').pop();
            const base = "main";

            const { data: prs } = await github.rest.pulls.list({
              owner,
              repo,
            });

            let pr = prs.find((pr) => {
              return pr.head.ref === triggeringRefHead && pr.base.ref === base;
            });

            if (!pr) {
              const { data: latestCommit } = await github.rest.repos.getCommit({
                owner,
                repo,
                ref: triggeringRefHead,
              });

              const result = await github.rest.pulls.create({
                owner,
                repo,
                head: triggeringRefHead,
                base,
                title: latestCommit.commit.message.replace(/\sGitOrigin-RevId.*/, "").replace(/^(.+)\s\(#[0-9]+\).*/, "$1").substring(0, 80),
                body: "If this change should result in new package versions please add a changeset before merging. You can do so by clicking the link provided by changeset bot below."
              });
              pr = result.data;
            }
            return pr.number;

      - name: "Checkout"
        uses: "actions/checkout@v3"
        with:
          fetch-depth: 0

      - name: Create main branch
        run: "git branch --track main origin/main"

      - name: Setup node
        uses: "actions/setup-node@v3"
        env:
          SKIP_YARN_COREPACK_CHECK: true
        with:
          node-version-file: ".nvmrc"

      - name: yarn install with cache
        uses: ./.github/actions/yarn-nm-install
        with:
          cwd: "."
          # Lock file differences shouldn't matter for these jobs and it's difficult to
          # sync up with the test-release-sync workflow (which actually needs the lock
          # to be updated and runs at the same time)
          install-mode: "install-allow-lock-update"

      - name: Run changeset
        id: changeset
        run: |
          echo "$(node ./.github/workflows/runChangeset.mjs | grep changeset)" >> $GITHUB_OUTPUT

      - name: List changed packages
        run: |
          echo "${{ steps.changeset.outputs.changeset }}"

      - name: Get PR comment vars
        id: pr-comment-vars
        run: |
          echo "lastCommit=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Update or post comment on PR with link to create changeset
        id: pr-comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_REPO: ${{ github.repository }}
          LAST_COMMIT: ${{ steps.pr-comment-vars.outputs.lastCommit }}
          CHANGESET: ${{ steps.changeset.outputs.changeset }}
        run: |
          node ./.github/workflows/updatePR.mjs
