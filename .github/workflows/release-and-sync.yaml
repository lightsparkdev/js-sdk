name: Release and sync

on:
  push:
    branches:
      - main

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    environment: npm
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup Node.js 16
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install Dependencies
        run: yarn

      - name: Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@v1
        with:
          # This expects you to have a script called release which does a build for your packages and calls changeset publish
          publish: yarn release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Notify publish on Slack
        if: steps.changesets.outputs.published == 'true'
        # You can do something when a publish happens.
        run: |
          json_escape () {
            printf '%s' "$1" | python -c 'import json,sys; print(json.dumps(sys.stdin.read()))'
          }

          text=$(json_escape ":white_check_mark: ${{ github.actor }} <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id}}|published> new js-sdk versions ${{ steps.changesets.outputs.publishedPackages }} <${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}|${{ github.ref_name }}>")

          curl --data-binary @- --header "Content-Type: application/json" --silent "${{ secrets.SLACK_WEBHOOK_ENGINT }}" <<EOF
          {
            "text": $text
          }
          EOF

      - name: "Notify failure on Slack"
        if: "failure() && github.event_name == 'push'"
        run: |
          curl --data-binary @- --header "Content-Type: application/json" --silent "${{ secrets.SLACK_WEBHOOK_ENGINT }}" <<EOF
          {
            "text": ":x: js-sdk public repo: ${{ github.workflow }} workflow by ${{ github.actor }} <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id}}|failed> in ${{ github.job }} on <${{ github.server_url }}/${{ github.repository }}/commit/$GITHUB_SHA|${{ github.ref_name }}>"
          }
          EOF

  create-webdev-pr:
    name: Create Webdev PR
    runs-on: ubuntu-latest
    environment: npm
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Reset develop to main
        run: |
          git checkout develop
          git reset --hard origin/main
          git push origin develop --force
          git checkout main

      - name: Generate a token
        id: generate_token
        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: "Run Copybara"
        env:
          TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          ls -la
          git config --global user.name 'Lightspark Eng'
          git config --global user.email 'engineering@lightspark.com'
          echo "https://x-access-token:${TOKEN}@github.com" > ~/.git-credentials

          on_exit() {
            # See this for possible error codes from Copybara https://github.com/google/copybara/issues/236
            exit_code=$?
            case $exit_code in
              0)
                echo "Copybara completed successfully"
                exit 0
                ;;
              4)
                echo "Copybara completed with no changes detected, exiting 0"
                exit 0
                ;;
              *)
                echo "Copybara failed with exit code $exit_code"
                exit $exit_code
                ;;
            esac
          }

          curl https://lsdev-repo.s3-us-west-2.amazonaws.com/github-actions/copybara_deploy.jar --output ./copybara.jar
          trap on_exit EXIT
          java -jar copybara.jar ./copy.bara.sky js-sdk-pull --nogit-destination-rebase

      - name: "Notify failure on Slack"
        if: "failure() && github.event_name == 'push'"
        run: |
          curl --data-binary @- --header "Content-Type: application/json" --silent "${{ secrets.SLACK_WEBHOOK_ENGINT }}" <<EOF
          {
            "text": ":x: ${{ github.workflow }} workflow by ${{ github.actor }} <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id}}|failed> in ${{ github.job }} on <${{ github.server_url }}/${{ github.repository }}/commit/$GITHUB_SHA|${{ github.ref_name }}>"
          }
          EOF
