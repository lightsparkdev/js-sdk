type Account implements LightsparkNodeOwner & Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when the entity was first created."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!

  """
  The API tokens that can be used to authenticate this account when making API calls or using our SDKs. See the "Authentication" section of our API docs for more details on its usage.
  """
  api_tokens(first: Int): AccountToApiTokensConnection!

  """
  The details of the balance of the nodes owned by this account on the Bitcoin Network.
  """
  blockchain_balance(
    """Filter the nodes by their bitcoin network."""
    bitcoin_networks: [BitcoinNetwork!] = null

    """Filter the nodes by their ID."""
    node_ids: [ID!] = null
  ): BlockchainBalance

  """
  A summary metric used to capture how well positioned a node is to send, receive, or route transactions efficiently. Maximizing a node's conductivity helps a nodeâ€™s transactions to be capital efficient. The value is an integer ranging between 0 and 10 (bounds included).
  """
  conductivity(
    """Filter the nodes by their bitcoin network."""
    bitcoin_networks: [BitcoinNetwork!] = null

    """Filter the nodes by their ID."""
    node_ids: [ID!] = null
  ): Int

  """
  The total sum of the channel balances (online and offline) on this node.
  """
  local_balance(
    """Filter the nodes by their bitcoin network."""
    bitcoin_networks: [BitcoinNetwork!] = null

    """Filter the nodes by their ID."""
    node_ids: [ID!] = null
  ): CurrencyAmount

  """The name of this account."""
  name: String

  """The nodes that are managed by this account."""
  nodes(
    """
    The number of nodes to fetch. It is required if you are accessing the edges of the underlying connection.
    """
    first: Int = null

    """Filter the nodes by their bitcoin network."""
    bitcoin_networks: [BitcoinNetwork!] = null

    """Filter the nodes by their ID."""
    node_ids: [ID!] = null
  ): AccountToNodesConnection!

  """
  The sum of the channel balances that are available to receive on the nodes of this account.
  """
  remote_balance(
    """Filter the nodes by their bitcoin network."""
    bitcoin_networks: [BitcoinNetwork!] = null

    """Filter the nodes by their ID."""
    node_ids: [ID!] = null
  ): CurrencyAmount

  """
  An integer between 0 and 100 (included) that represents the percentage of uptime for the nodes owned by this account.
  """
  uptime_percentage(
    """
    Only use the uptime after that date. If not specified, it will set to the date this account was created.
    """
    after_date: DateTime = null

    """
    Only use the uptime before that date. If not specified, it will set to today.
    """
    before_date: DateTime = null

    """Filter the nodes by their bitcoin network."""
    bitcoin_networks: [BitcoinNetwork!] = null

    """Filter the nodes by their ID."""
    node_ids: [ID!] = null
  ): Int

  """
  The channels between the nodes that belong to this account and other nodes.
  """
  channels(bitcoin_network: BitcoinNetwork!, lightning_node_id: ID = null, after_date: DateTime = null, before_date: DateTime = null, first: Int = null): AccountToChannelsConnection!

  """
  The transactions that this account is involved. Those can happen on the lightning network (either as a sender, recipient, router) or on the Bitcoin blockchain (as a sender or a recipient).
  """
  transactions(first: Int = null, after: String = null, types: [TransactionType!] = null, after_date: DateTime = null, before_date: DateTime = null, bitcoin_network: BitcoinNetwork = null, lightning_node_id: ID = null, statuses: [TransactionStatus!] = null, exclude_failures: TransactionFailures = null): AccountToTransactionsConnection!

  """
  The payment requests that have been generated by the nodes of this account.
  """
  payment_requests(first: Int = null, after: String = null, after_date: DateTime = null, before_date: DateTime = null, bitcoin_network: BitcoinNetwork = null, lightning_node_id: ID = null): AccountToPaymentRequestsConnection!

  """The wallets attached to this account."""
  wallets(
    """The number of wallets to fetch."""
    first: Int = null
  ): AccountToWalletsConnection!
}

type AccountToApiTokensConnection {
  """
  An object that holds pagination information about the objects in this connection.
  """
  page_info: PageInfo!

  """
  The total count of objects in this connection, using the current filters. It is different from the number of objects returned in the current page (in the `entities` field).
  """
  count: Int!

  """The API tokens for the current page of this connection."""
  entities: [ApiToken!]!
}

type AccountToChannelsConnection {
  """
  The total count of objects in this connection, using the current filters. It is different from the number of objects returned in the current page (in the `entities` field).
  """
  count(exclude_failed_closed: Boolean = null): Int!

  """The channels for the current page of this connection."""
  entities: [Channel!]!
}

"""A connection between an account and the nodes it manages."""
type AccountToNodesConnection {
  """
  An object that holds pagination information about the objects in this connection.
  """
  page_info: PageInfo!

  """
  The total count of objects in this connection, using the current filters. It is different from the number of objects returned in the current page (in the `entities` field).
  """
  count: Int!

  """
  The main purpose for the selected set of nodes. It is automatically determined from the nodes that are selected in this connection and is used for optimization purposes, as well as to determine the variation of the UI that should be presented to the user.
  """
  purpose: LightsparkNodePurpose

  """The nodes for the current page of this connection."""
  entities: [LightsparkNode!]!
}

type AccountToPaymentRequestsConnection {
  """
  The total count of objects in this connection, using the current filters. It is different from the number of objects returned in the current page (in the `entities` field).
  """
  count: Int

  """The payment requests for the current page of this connection."""
  entities: [PaymentRequest!]!

  """
  An object that holds pagination information about the objects in this connection.
  """
  page_info: PageInfo!
}

type AccountToTransactionsConnection {
  """
  Profit (or loss) generated by the transactions in this connection, with the set of filters and constraints provided.
  """
  profit_loss: CurrencyAmount

  """
  Average fee earned for the transactions in this connection, with the set of filters and constraints provided.
  """
  average_fee_earned: CurrencyAmount

  """
  The total count of objects in this connection, using the current filters. It is different from the number of objects returned in the current page (in the `entities` field).
  """
  count: Int!

  """
  Total amount transacted by the transactions in this connection, with the set of filters and constraints provided.
  """
  total_amount_transacted: CurrencyAmount

  """The transactions for the current page of this connection."""
  entities: [Transaction!]!

  """
  An object that holds pagination information about the objects in this connection.
  """
  page_info: PageInfo!
}

type AccountToWalletsConnection {
  """
  An object that holds pagination information about the objects in this connection.
  """
  page_info: PageInfo!

  """
  The total count of objects in this connection, using the current filters. It is different from the number of objects returned in the current page (in the `entities` field).
  """
  count: Int!

  """The wallets for the current page of this connection."""
  entities: [Wallet!]!
}

type ApiToken implements Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when the entity was first created."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!

  """
  An opaque identifier that should be used as a client_id (or username) in the HTTP Basic Authentication scheme when issuing requests against the Lightspark API.
  """
  client_id: String!

  """
  An arbitrary name chosen by the creator of the token to help identify the token in the list of tokens that have been created for the account.
  """
  name: String!

  """A list of permissions granted to the token."""
  permissions: [Permission!]!
}

type Balances {
  """
  This represents the balance that should be displayed when asked "how much do I own right now?".
  
  It represents the amount currently owned, including things that may not be owned soon (e.g. in-flight outgoing payments, in-flight withdrawals, commit fees, etc.). It really is a snapshot of what is officially owned at this instant.
  """
  owned_balance: CurrencyAmount!

  """
  This represents the balance that should be displayed when asked "how much can I send on Lightning right now?".
  
  It represents the amount currently available to be sent on the Lightning network. We remove from the balance all the funds that are temporarily locked (e.g. channel reserves).
  """
  available_to_send_balance: CurrencyAmount!

  """
  This represents the balance that should be displayed when asked "how much money can I withdraw on the Bitcoin network right now?".
  
  It represents the amount currently available to withdraw and is usually equal to the `owned_balance` but it does not include in-flight operations (which would likely succeed and therefore likely make your withdrawal fail).
  """
  available_to_withdraw_balance: CurrencyAmount!
}

enum BitcoinNetwork {
  """The production version of the Bitcoin Blockchain."""
  MAINNET

  """A test version of the Bitcoin Blockchain, maintained by Lightspark."""
  REGTEST

  """
  A test version of the Bitcoin Blockchain, maintained by a centralized organization. Not in use at Lightspark.
  """
  SIGNET @deprecated(reason: "Use REGTEST.")

  """A test version of the Bitcoin Blockchain, publically available."""
  TESTNET
}

"""
This object provides a detailed breakdown of a `LightsparkNode`'s current balance on the Bitcoin Network.
"""
type BlockchainBalance {
  """The total wallet balance, including unconfirmed UTXOs."""
  total_balance: CurrencyAmount

  """The balance of confirmed UTXOs in the wallet."""
  confirmed_balance: CurrencyAmount

  """The balance of unconfirmed UTXOs in the wallet."""
  unconfirmed_balance: CurrencyAmount

  """The balance that's locked by an on-chain transaction."""
  locked_balance: CurrencyAmount

  """Funds required to be held in reserve for channel bumping."""
  required_reserve: CurrencyAmount

  """Funds available for creating channels or withdrawing."""
  available_balance: CurrencyAmount
}

"""
An object that represents a payment channel between two nodes in the Lightning Network.
"""
type Channel implements Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when the entity was first created."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!

  """The transaction that funded the channel upon channel opening."""
  funding_transaction: ChannelOpeningTransaction

  """
  The total amount of funds in this channel, including the channel balance on the local node, the channel balance on the remote node and the on-chain fees to close the channel.
  """
  capacity: CurrencyAmount

  """The channel balance on the local node."""
  local_balance: CurrencyAmount

  """
  The channel balance on the local node that is currently allocated to in-progress payments.
  """
  local_unsettled_balance: CurrencyAmount

  """The channel balance on the remote node."""
  remote_balance: CurrencyAmount

  """
  The channel balance on the remote node that is currently allocated to in-progress payments.
  """
  remote_unsettled_balance: CurrencyAmount

  """
  The channel balance that is currently allocated to in-progress payments.
  """
  unsettled_balance: CurrencyAmount

  """
  The total balance in this channel, including the channel balance on both local and remote nodes.
  """
  total_balance: CurrencyAmount

  """
  An integer between 0 and 100 (included) that represents the percentage of uptime for this channel.
  """
  uptime_percentage(after_date: DateTime = null, before_date: DateTime = null): Int

  """
  A connection to all transactions that have occurred on the channel including outgoing payments, incoming payments, routing transactions and on-chain transactions.
  """
  transactions(types: [TransactionType!] = null, after_date: DateTime = null, before_date: DateTime = null): ChannelToTransactionsConnection!

  """The current status of this channel."""
  status: ChannelStatus

  """
  The estimated time to wait for the channel's hash timelock contract to expire when force closing the channel. It is in unit of minutes.
  """
  estimated_force_closure_wait_minutes: Int

  """
  The amount to be paid in fees for the current set of commitment transactions.
  """
  commit_fee: CurrencyAmount

  """The fees charged for routing payments through this channel."""
  fees: ChannelFees

  """If known, the remote node of the channel."""
  remote_node: Node

  """The local Lightspark node of the channel."""
  local_node: LightsparkNode!

  """
  The unique identifier of the channel on Lightning Network, which is the location in the chain that the channel was confirmed. The format is <block-height>:<tx-index>:<tx-output>.
  """
  short_channel_id: String
}

"""
The transaction on Bitcoin blockchain to close a channel on Lightning Network where the balances are allocated back to local and remote nodes.
"""
type ChannelClosingTransaction implements OnChainTransaction & Transaction & Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when this transaction was initiated."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!

  """The current status of this transaction."""
  status: TransactionStatus!

  """The date and time when this transaction was completed or failed."""
  resolved_at: DateTime

  """The amount of money involved in this transaction."""
  amount: CurrencyAmount!

  """
  The hash of this transaction, so it can be uniquely identified on the Lightning Network.
  """
  transaction_hash: String

  """
  The fees that were paid by the wallet sending the transaction to commit it to the Bitcoin blockchain.
  """
  fees: CurrencyAmount

  """
  The hash of the block that included this transaction. This will be null for unconfirmed transactions.
  """
  block_hash: String

  """
  The height of the block that included this transaction. This will be zero for unconfirmed transactions.
  """
  block_height: Int!

  """The Bitcoin blockchain addresses this transaction was sent to."""
  destination_addresses: [String!]!

  """
  The number of blockchain confirmations for this transaction in real time.
  """
  num_confirmations: Int

  """If known, the channel this transaction is closing."""
  channel: Channel
}

type ChannelFees {
  base_fee: CurrencyAmount
  fee_rate_per_mil: Int
}

"""
The transaction on Bitcoin blockchain to open a channel on Lightning Network funded by the local Lightspark node.
"""
type ChannelOpeningTransaction implements OnChainTransaction & Transaction & Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when this transaction was initiated."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!

  """The current status of this transaction."""
  status: TransactionStatus!

  """The date and time when this transaction was completed or failed."""
  resolved_at: DateTime

  """The amount of money involved in this transaction."""
  amount: CurrencyAmount!

  """
  The hash of this transaction, so it can be uniquely identified on the Lightning Network.
  """
  transaction_hash: String

  """
  The fees that were paid by the wallet sending the transaction to commit it to the Bitcoin blockchain.
  """
  fees: CurrencyAmount

  """
  The hash of the block that included this transaction. This will be null for unconfirmed transactions.
  """
  block_hash: String

  """
  The height of the block that included this transaction. This will be zero for unconfirmed transactions.
  """
  block_height: Int!

  """The Bitcoin blockchain addresses this transaction was sent to."""
  destination_addresses: [String!]!

  """
  The number of blockchain confirmations for this transaction in real time.
  """
  num_confirmations: Int

  """If known, the channel this transaction is opening."""
  channel: Channel
}

enum ChannelStatus {
  """The channel is online and ready to send and receive funds."""
  OK

  """
  The channel has been created, but the Bitcoin transaction that initiates it still needs to be confirmed on the Bitcoin blockchain.
  """
  PENDING

  """The channel is not available, likely because the peer is not online."""
  OFFLINE

  """
  The channel is behaving properly, but its remote balance is much higher than its local balance so it is not balanced properly for sending funds out.
  """
  UNBALANCED_FOR_SEND

  """
  The channel is behaving properly, but its remote balance is much lower than its local balance so it is not balanced properly for receiving funds.
  """
  UNBALANCED_FOR_RECEIVE

  """
  The channel has been closed. Information about the channel is still available for historical purposes but the channel cannot be used anymore.
  """
  CLOSED

  """
  Something unexpected happened and we cannot determine the status of this channel. Please try again later or contact the support.
  """
  ERROR
}

type ChannelToTransactionsConnection {
  """
  The total count of objects in this connection, using the current filters. It is different from the number of objects returned in the current page (in the `entities` field).
  """
  count: Int!

  """
  The average fee for the transactions that transited through this channel, according to the filters and constraints of the connection.
  """
  average_fee: CurrencyAmount

  """
  The total amount transacted for the transactions that transited through this channel, according to the filters and constraints of the connection.
  """
  total_amount_transacted: CurrencyAmount

  """
  The total amount of fees for the transactions that transited through this channel, according to the filters and constraints of the connection.
  """
  total_fees: CurrencyAmount
}

input CreateApiTokenInput {
  """
  An arbitrary name that the user can choose to identify the API token in a list.
  """
  name: String!

  """List of permissions to grant to the API token"""
  permissions: [Permission!]!
}

type CreateApiTokenOutput {
  """The API Token that has been created."""
  api_token: ApiToken!

  """
  The secret that should be used to authenticate against our API.
  This secret is not stored and will never be available again after this. You must keep this secret secure as it grants access to your account.
  """
  client_secret: String!
}

input CreateInvoiceInput {
  node_id: ID!
  amount_msats: Long!
  memo: String = null
  invoice_type: InvoiceType = null
}

type CreateInvoiceOutput {
  invoice: Invoice!
}

input CreateLnurlInvoiceInput {
  """The node from which to create the invoice."""
  node_id: ID!

  """The amount for which the invoice should be created, in millisatoshis."""
  amount_msats: Long!

  """
  The SHA256 hash of the LNURL metadata payload. This will be present in the h-tag (SHA256 purpose of payment) of the resulting Bolt 11 invoice.
  """
  metadata_hash: String!
}

input CreateNodeWalletAddressInput {
  node_id: ID!
}

type CreateNodeWalletAddressOutput {
  node: LightsparkNode!
  wallet_address: String!
}

input CreateTestModeInvoiceInput {
  local_node_id: ID!
  amount_msats: Long!
  memo: String = null
  invoice_type: InvoiceType = null
}

type CreateTestModeInvoiceOutput {
  encoded_payment_request: String!
}

input CreateTestModePaymentInput {
  """The node to where you want to send the payment."""
  local_node_id: ID!

  """The invoice you want to be paid (as defined by the BOLT11 standard)."""
  encoded_invoice: String!

  """
  The amount you will be paid for this invoice, expressed in msats. It should ONLY be set when the invoice amount is zero.
  """
  amount_msats: Long = null
}

type CreateTestModePaymentoutput {
  """The payment that has been sent."""
  payment: OutgoingPayment!
}

enum CryptoSanctionsScreeningProvider {
  CHAINALYSIS
}

"""Represents the value and unit for an amount of currency."""
type CurrencyAmount {
  """The original numeric value for this CurrencyAmount."""
  original_value: Long!

  """The original unit of currency for this CurrencyAmount."""
  original_unit: CurrencyUnit!

  """The unit of user's preferred currency."""
  preferred_currency_unit: CurrencyUnit!

  """
  The rounded numeric value for this CurrencyAmount in the very base level of user's preferred currency. For example, for USD, the value will be in cents.
  """
  preferred_currency_value_rounded: Long!

  """
  The approximate float value for this CurrencyAmount in the very base level of user's preferred currency. For example, for USD, the value will be in cents.
  """
  preferred_currency_value_approx: Float!
}

enum CurrencyUnit {
  """
  Bitcoin is the cryptocurrency native to the Bitcoin network. It is used as the native medium for value transfer for the Lightning Network.
  """
  BITCOIN

  """
  0.00000001 (10e-8) Bitcoin or one hundred millionth of a Bitcoin. This is the unit most commonly used in Lightning transactions.
  """
  SATOSHI

  """
  0.001 Satoshi, or 10e-11 Bitcoin. We recommend using the Satoshi unit instead when possible.
  """
  MILLISATOSHI

  """United States Dollar."""
  USD

  """
  0.000000001 (10e-9) Bitcoin or a billionth of a Bitcoin. We recommend using the Satoshi unit instead when possible.
  """
  NANOBITCOIN @deprecated(reason: "Use BITCOIN instead.")

  """
  0.000001 (10e-6) Bitcoin or a millionth of a Bitcoin. We recommend using the Satoshi unit instead when possible.
  """
  MICROBITCOIN @deprecated(reason: "Use BITCOIN instead.")

  """
  0.001 (10e-3) Bitcoin or a thousandth of a Bitcoin. We recommend using the Satoshi unit instead when possible.
  """
  MILLIBITCOIN @deprecated(reason: "Use BITCOIN instead.")
}

"""Date with time (isoformat)"""
scalar DateTime

input DeleteApiTokenInput {
  api_token_id: ID!
}

type DeleteApiTokenOutput {
  account: Account!
}

"""
The transaction on Bitcoin blockchain to fund the Lightspark node's wallet.
"""
type Deposit implements OnChainTransaction & Transaction & Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when this transaction was initiated."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!

  """The current status of this transaction."""
  status: TransactionStatus!

  """The date and time when this transaction was completed or failed."""
  resolved_at: DateTime

  """The amount of money involved in this transaction."""
  amount: CurrencyAmount!

  """
  The hash of this transaction, so it can be uniquely identified on the Lightning Network.
  """
  transaction_hash: String

  """
  The fees that were paid by the wallet sending the transaction to commit it to the Bitcoin blockchain.
  """
  fees: CurrencyAmount

  """
  The hash of the block that included this transaction. This will be null for unconfirmed transactions.
  """
  block_hash: String

  """
  The height of the block that included this transaction. This will be zero for unconfirmed transactions.
  """
  block_height: Int!

  """The Bitcoin blockchain addresses this transaction was sent to."""
  destination_addresses: [String!]!

  """
  The number of blockchain confirmations for this transaction in real time.
  """
  num_confirmations: Int

  """The recipient Lightspark node this deposit was sent to."""
  destination: LightsparkNode!
}

"""
This interface is used by all the entities in the Lightspark systems. It defines a few core fields that are available everywhere. Any object that implements this interface can be queried using the `entity` query and its ID.
"""
interface Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when the entity was first created."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!
}

type FeeEstimate {
  fee_fast: CurrencyAmount!
  fee_min: CurrencyAmount!
}

input FundNodeInput {
  node_id: ID!
  amount_sats: Long = null
}

type FundNodeOutput {
  amount: CurrencyAmount!
}

"""
This is a node on the Lightning Network, managed by a third party. The information about this node is public data that has been obtained by observing the Lightning Network.
"""
type GraphNode implements Node & Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when the entity was first created."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!

  """
  A name that identifies the node. It has no importance in terms of operating the node, it is just a way to identify and search for commercial services or popular nodes. This alias can be changed at any time by the node operator.
  """
  alias: String

  """The Bitcoin Network this node is deployed in."""
  bitcoin_network: BitcoinNetwork!

  """
  A hexadecimal string that describes a color. For example "#000000" is black, "#FFFFFF" is white. It has no importance in terms of operating the node, it is just a way to visually differentiate nodes. That color can be changed at any time by the node operator.
  """
  color: String

  """
  A summary metric used to capture how well positioned a node is to send, receive, or route transactions efficiently. Maximizing a node's conductivity helps a nodeâ€™s transactions to be capital efficient. The value is an integer ranging between 0 and 10 (bounds included).
  """
  conductivity: Int

  """
  The name of this node in the network. It will be the most human-readable option possible, depending on the data available for this node.
  """
  display_name: String!

  """
  The public key of this node. It acts as a unique identifier of this node in the Lightning Network.
  """
  public_key: String

  """
  The addresses that this node has announced for itself on the Lightning Network.
  """
  addresses(first: Int = null, types: [NodeAddressType!] = null): NodeToAddressesConnection!
}

"""
One hop signifies a payment moving one node ahead on a payment route; a list of sequential hops defines the path from sender node to recipient node for a payment attempt.
"""
type Hop implements Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when the entity was first created."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!

  """The destination node of the hop."""
  destination: Node

  """The zero-based index position of this hop in the path"""
  index: Int!

  """The public key of the node to which the hop is bound."""
  public_key: String

  """The amount that is to be forwarded to the destination node."""
  amount_to_forward: CurrencyAmount

  """
  The fees to be collected by the source node for forwarding the payment over the hop.
  """
  fee: CurrencyAmount

  """The block height at which an unsettled HTLC is considered expired."""
  expiry_block_height: Int
}

enum HtlcAttemptFailureCode {
  INCORRECT_OR_UNKNOWN_PAYMENT_DETAILS
  INCORRECT_PAYMENT_AMOUNT
  FINAL_INCORRECT_CLTV_EXPIRY
  FINAL_INCORRECT_HTLC_AMOUNT
  FINAL_EXPIRY_TOO_SOON
  INVALID_REALM
  EXPIRY_TOO_SOON
  INVALID_ONION_VERSION
  INVALID_ONION_HMAC
  INVALID_ONION_KEY
  AMOUNT_BELOW_MINIMUM
  FEE_INSUFFICIENT
  INCORRECT_CLTV_EXPIRY
  CHANNEL_DISABLED
  TEMPORARY_CHANNEL_FAILURE
  REQUIRED_NODE_FEATURE_MISSING
  REQUIRED_CHANNEL_FEATURE_MISSING
  UNKNOWN_NEXT_PEER
  TEMPORARY_NODE_FAILURE
  PERMANENT_NODE_FAILURE
  PERMANENT_CHANNEL_FAILURE
  EXPIRY_TOO_FAR
  MPP_TIMEOUT
  INVALID_ONION_PAYLOAD
  INTERNAL_FAILURE
  UNKNOWN_FAILURE
  UNREADABLE_FAILURE
}

"""
A transaction that was sent to a Lightspark node on the Lightning Network.
"""
type IncomingPayment implements LightningTransaction & Transaction & Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when this transaction was initiated."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!

  """The current status of this transaction."""
  status: TransactionStatus!

  """The date and time when this transaction was completed or failed."""
  resolved_at: DateTime

  """The amount of money involved in this transaction."""
  amount: CurrencyAmount!

  """
  The hash of this transaction, so it can be uniquely identified on the Lightning Network.
  """
  transaction_hash: String

  """If known, the Lightspark node this payment originated from."""
  origin: LightsparkNode

  """The recipient Lightspark node this payment was sent to."""
  destination: LightsparkNode!

  """The attempts that have been made for this payment."""
  attempts(first: Int = null, statuses: [IncomingPaymentAttemptStatus!] = null): IncomingPaymentToAttemptsConnection!

  """
  The optional payment request for this incoming payment, which will be null if the payment is sent through keysend.
  """
  payment_request: PaymentRequest
}

"""
An attempt for a payment over a route from sender node to recipient node.
"""
type IncomingPaymentAttempt implements Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when the entity was first created."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!

  """The status of the incoming payment attempt."""
  status: IncomingPaymentAttemptStatus!

  """The time the incoming payment attempt failed or succeeded."""
  resolved_at: DateTime

  """The total amount of that was attempted to send."""
  amount: CurrencyAmount!

  """The channel this attempt was made on."""
  channel: Channel!
}

"""
Enum that enumerates all the possible status of an incoming payment attempt.
"""
enum IncomingPaymentAttemptStatus {
  ACCEPTED
  SETTLED
  CANCELED
  UNKNOWN
}

"""The connection from incoming payment to all attempts."""
type IncomingPaymentToAttemptsConnection {
  """
  The total count of objects in this connection, using the current filters. It is different from the number of objects returned in the current page (in the `entities` field).
  """
  count: Int!

  """The incoming payment attempts for the current page of this connection."""
  entities: [IncomingPaymentAttempt!]!
}

"""
This object represents a BOLT #11 invoice (https://github.com/lightning/bolts/blob/master/11-payment-encoding.md) initiated by a Lightspark Node.
"""
type Invoice implements PaymentRequest & Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when the entity was first created."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!

  """The details of the invoice."""
  data: InvoiceData!

  """The status of the payment request."""
  status: PaymentRequestStatus!

  """The total amount that has been paid to this invoice."""
  amount_paid: CurrencyAmount
}

"""
This object represents the BOLT #11 invoice protocol for Lightning Payments. See https://github.com/lightning/bolts/blob/master/11-payment-encoding.md.
"""
type InvoiceData implements PaymentRequestData {
  encoded_payment_request: String!
  bitcoin_network: BitcoinNetwork!

  """The payment hash of this invoice."""
  payment_hash: String!

  """
  The requested amount in this invoice. If it is equal to 0, the sender should choose the amount to send.
  """
  amount: CurrencyAmount!

  """The date and time when this invoice was created."""
  created_at: DateTime!

  """The date and time when this invoice will expire."""
  expires_at: DateTime!

  """A short, UTF-8 encoded, description of the purpose of this invoice."""
  memo: String

  """The lightning node that will be paid when fulfilling this invoice."""
  destination: Node!
}

enum InvoiceType {
  """A standard Bolt 11 invoice."""
  STANDARD

  """An AMP (Atomic Multi-path Payment) invoice."""
  AMP
}

input LightningFeeEstimateForInvoiceInput {
  """The node from where you want to send the payment."""
  node_id: ID!

  """The invoice you want to pay (as defined by the BOLT11 standard)."""
  encoded_payment_request: String!

  """
  If the invoice does not specify a payment amount, then the amount that you wish to pay, expressed in msats.
  """
  amount_msats: Long = null
}

input LightningFeeEstimateForNodeInput {
  """The node from where you want to send the payment."""
  node_id: ID!

  """The public key of the node that you want to pay."""
  destination_node_public_key: String!

  """The payment amount expressed in msats."""
  amount_msats: Long!
}

type LightningFeeEstimateOutput {
  """The estimated fees for the payment."""
  fee_estimate: CurrencyAmount!
}

interface LightningTransaction implements Transaction & Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when this transaction was initiated."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!

  """The current status of this transaction."""
  status: TransactionStatus!

  """The date and time when this transaction was completed or failed."""
  resolved_at: DateTime

  """The amount of money involved in this transaction."""
  amount: CurrencyAmount!

  """
  The hash of this transaction, so it can be uniquely identified on the Lightning Network.
  """
  transaction_hash: String
}

"""
This is a node that is managed by Lightspark and is managed within the current connected account. It contains many details about the node configuration, state, and metadata.
"""
type LightsparkNode implements Node & Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when the entity was first created."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!

  """
  A name that identifies the node. It has no importance in terms of operating the node, it is just a way to identify and search for commercial services or popular nodes. This alias can be changed at any time by the node operator.
  """
  alias: String

  """The Bitcoin Network this node is deployed in."""
  bitcoin_network: BitcoinNetwork!

  """
  A hexadecimal string that describes a color. For example "#000000" is black, "#FFFFFF" is white. It has no importance in terms of operating the node, it is just a way to visually differentiate nodes. That color can be changed at any time by the node operator.
  """
  color: String

  """
  A summary metric used to capture how well positioned a node is to send, receive, or route transactions efficiently. Maximizing a node's conductivity helps a nodeâ€™s transactions to be capital efficient. The value is an integer ranging between 0 and 10 (bounds included).
  """
  conductivity: Int

  """
  The name of this node in the network. It will be the most human-readable option possible, depending on the data available for this node.
  """
  display_name: String!

  """
  The public key of this node. It acts as a unique identifier of this node in the Lightning Network.
  """
  public_key: String

  """
  The addresses that this node has announced for itself on the Lightning Network.
  """
  addresses(first: Int = null, types: [NodeAddressType!] = null): NodeToAddressesConnection!

  """The account that owns this LightsparkNode."""
  account: Account! @deprecated(reason: "Use owner instead.")

  """The owner of this LightsparkNode."""
  owner: LightsparkNodeOwner!

  """The details of the balance of this node on the Bitcoin Network."""
  blockchain_balance: BlockchainBalance

  """The channels that are connected to this node."""
  channels(first: Int = null, statuses: [ChannelStatus!] = null): LightsparkNodeToChannelsConnection!

  """
  The private key client is using to sign a GraphQL request which will be verified at LND.
  """
  encrypted_signing_private_key: Secret

  """
  The sum of the balance on the Bitcoin Network, channel balances, and commit fees on this node.
  """
  total_balance: CurrencyAmount

  """
  The total sum of the channel balances (online and offline) on this node.
  """
  total_local_balance: CurrencyAmount

  """
  The sum of the channel balances (online only) that are available to send on this node.
  """
  local_balance: CurrencyAmount

  """
  The main purpose of this node. It is used by Lightspark for optimizations on the node's channels.
  """
  purpose: LightsparkNodePurpose

  """
  The sum of the channel balances that are available to receive on this node.
  """
  remote_balance: CurrencyAmount

  """The current status of this node."""
  status: LightsparkNodeStatus
}

interface LightsparkNodeOwner implements Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when the entity was first created."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!
}

enum LightsparkNodePurpose {
  SEND
  RECEIVE
  ROUTING
}

enum LightsparkNodeStatus {
  CREATED
  DEPLOYED
  STARTED
  SYNCING
  READY
  STOPPED
  TERMINATED
  TERMINATING
  WALLET_LOCKED
  FAILED_TO_DEPLOY
}

type LightsparkNodeToChannelsConnection {
  """
  An object that holds pagination information about the objects in this connection.
  """
  page_info: PageInfo!

  """
  The total count of objects in this connection, using the current filters. It is different from the number of objects returned in the current page (in the `entities` field).
  """
  count: Int!

  """The channels for the current page of this connection."""
  entities: [Channel!]!
}

"""The `Long` scalar type represents a 64 bit integer."""
scalar Long

type Mutation {
  """
  Creates a new API token that can be used to authenticate requests for this account when using the Lightspark APIs and SDKs.
  """
  create_api_token(input: CreateApiTokenInput!): CreateApiTokenOutput!

  """
  Generates a Lightning Invoice (follows the Bolt 11 specification) to request a payment from another Lightning Node. If you are in test mode, the generated invoice can only be paid by create_test_mode_payment mutation.
  """
  create_invoice(input: CreateInvoiceInput!): CreateInvoiceOutput!

  """
  Generates a Lightning Invoice (follows the Bolt 11 specification) to request a payment from another Lightning Node. This should only be used for generating invoices for LNURLs, with `create_invoice` preferred in the general case.
  """
  create_lnurl_invoice(input: CreateLnurlInvoiceInput!): CreateInvoiceOutput!

  """
  Creates a Bitcoin address for the wallet associated with your Lightning Node. You can use this address to send funds to your node. It is a best practice to generate a new wallet address every time you need to send money. You can generate as many wallet addresses as you want.
  """
  create_node_wallet_address(input: CreateNodeWalletAddressInput!): CreateNodeWalletAddressOutput!

  """
  In test mode, generates a Lightning Invoice which can be paid by a local node.
  """
  create_test_mode_invoice(input: CreateTestModeInvoiceInput!): CreateTestModeInvoiceOutput!

  """In test mode, simulates a payment from other node to an invoice."""
  create_test_mode_payment(input: CreateTestModePaymentInput!): CreateTestModePaymentoutput!

  """Deletes an existing API token from this account."""
  delete_api_token(input: DeleteApiTokenInput!): DeleteApiTokenOutput!

  """
  Adds funds to a Lightspark node on the REGTEST network. If the amount is not specified, 10,000,000 SATOSHI will be added.
  This API only functions for nodes created on the REGTEST network and will return an error when called for any non-REGTEST node.
  """
  fund_node(input: FundNodeInput!): FundNodeOutput!

  """
  Sends a payment to a node on the Lightning Network, based on the invoice (as defined by the BOLT11 specification) that you provide. If you are in test mode, the invoice has to be generated by create_test_mode_invoice mutation.
  """
  pay_invoice(input: PayInvoiceInput!): PayInvoiceOutput!

  """
  Sends a payment directly to a node on the Lightning Network through the public key of the node without an invoice.
  """
  send_payment(input: SendPaymentInput!): SendPaymentOutput!
  screen_bitcoin_addresses(input: ScreenBitcoinAddressesInput!): ScreenBitcoinAddressesOutput!

  """
  Withdraws funds from the account and sends it to the requested bitcoin address.
  
  Depending on the chosen mode, it will first take the funds from the wallet, and if applicable, close channels appropriately to recover enough funds and reopen channels with the remaining funds.
  The process is asynchronous and may take up to a few minutes. You can check the progress by polling the `WithdrawalRequest` that is created, or by subscribing to a webhook.
  """
  request_withdrawal(input: RequestWithdrawalInput!): RequestWithdrawalOutput!
}

"""
This interface represents a lightning node that can be connected to the Lightning Network to send and receive transactions.
"""
interface Node implements Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when the entity was first created."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!

  """
  A name that identifies the node. It has no importance in terms of operating the node, it is just a way to identify and search for commercial services or popular nodes. This alias can be changed at any time by the node operator.
  """
  alias: String

  """The Bitcoin Network this node is deployed in."""
  bitcoin_network: BitcoinNetwork!

  """
  A hexadecimal string that describes a color. For example "#000000" is black, "#FFFFFF" is white. It has no importance in terms of operating the node, it is just a way to visually differentiate nodes. That color can be changed at any time by the node operator.
  """
  color: String

  """
  A summary metric used to capture how well positioned a node is to send, receive, or route transactions efficiently. Maximizing a node's conductivity helps a nodeâ€™s transactions to be capital efficient. The value is an integer ranging between 0 and 10 (bounds included).
  """
  conductivity: Int

  """
  The name of this node in the network. It will be the most human-readable option possible, depending on the data available for this node.
  """
  display_name: String!

  """
  The public key of this node. It acts as a unique identifier of this node in the Lightning Network.
  """
  public_key: String

  """
  The addresses that this node has announced for itself on the Lightning Network.
  """
  addresses(first: Int = null, types: [NodeAddressType!] = null): NodeToAddressesConnection!
}

"""
An object that represents the address of a node on the Lightning Network.
"""
type NodeAddress {
  """The string representation of the address."""
  address: String!

  """The type, or protocol, of this address."""
  type: NodeAddressType!
}

"""
An enum that enumerates all possible types of addresses of a node on the Lightning Network.
"""
enum NodeAddressType {
  IPV4
  IPV6
  TOR
}

"""
A connection between a node and the addresses it has announced for itself on Lightning Network.
"""
type NodeToAddressesConnection {
  """
  The total count of objects in this connection, using the current filters. It is different from the number of objects returned in the current page (in the `entities` field).
  """
  count: Int!

  """The addresses for the current page of this connection."""
  entities: [NodeAddress!]!
}

"""Transaction happened on Bitcoin blockchain."""
interface OnChainTransaction implements Transaction & Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when this transaction was initiated."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!

  """The current status of this transaction."""
  status: TransactionStatus!

  """The date and time when this transaction was completed or failed."""
  resolved_at: DateTime

  """The amount of money involved in this transaction."""
  amount: CurrencyAmount!

  """
  The hash of this transaction, so it can be uniquely identified on the Lightning Network.
  """
  transaction_hash: String

  """
  The fees that were paid by the wallet sending the transaction to commit it to the Bitcoin blockchain.
  """
  fees: CurrencyAmount

  """
  The hash of the block that included this transaction. This will be null for unconfirmed transactions.
  """
  block_hash: String

  """
  The height of the block that included this transaction. This will be zero for unconfirmed transactions.
  """
  block_height: Int!

  """The Bitcoin blockchain addresses this transaction was sent to."""
  destination_addresses: [String!]!

  """
  The number of blockchain confirmations for this transaction in real time.
  """
  num_confirmations: Int
}

"""
A transaction that was sent from a Lightspark node on the Lightning Network.
"""
type OutgoingPayment implements LightningTransaction & Transaction & Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when this transaction was initiated."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!

  """The current status of this transaction."""
  status: TransactionStatus!

  """The date and time when this transaction was completed or failed."""
  resolved_at: DateTime

  """The amount of money involved in this transaction."""
  amount: CurrencyAmount!

  """
  The hash of this transaction, so it can be uniquely identified on the Lightning Network.
  """
  transaction_hash: String

  """The Lightspark node this payment originated from."""
  origin: LightsparkNode!

  """If known, the final recipient node this payment was sent to."""
  destination: Node

  """The fees paid by the sender node to send the payment."""
  fees: CurrencyAmount

  """
  The data of the payment request that was paid by this transaction, if known.
  """
  payment_request_data: PaymentRequestData

  """The attempts that have been made for this payment for possible routes."""
  attempts(first: Int = null): OutgoingPaymentToAttemptsConnection!

  """If applicable, the reason why the payment failed."""
  failure_reason: PaymentFailureReason

  """
  If applicable, user-facing error message describing why the payment failed.
  """
  failure_message: RichText
}

"""
An attempt for a payment over a route from sender node to recipient node.
"""
type OutgoingPaymentAttempt implements Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when the attempt was initiated."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!

  """The status of an outgoing payment attempt."""
  status: OutgoingPaymentAttemptStatus!

  """
  If the payment attempt failed, then this contains the Bolt #4 failure code.
  """
  failure_code: HtlcAttemptFailureCode

  """
  If the payment attempt failed, then this contains the index of the hop at which the problem occurred.
  """
  failure_source_index: Int

  """The time the outgoing payment attempt failed or succeeded."""
  resolved_at: DateTime

  """
  The total amount of funds required to complete a payment over this route. This value includes the cumulative fees for each hop. As a result, the attempt extended to the first-hop in the route will need to have at least this much value, otherwise the route will fail at an intermediate node due to an insufficient amount.
  """
  amount: CurrencyAmount

  """
  The sum of the fees paid at each hop within the route of this attempt. In the case of a one-hop payment, this value will be zero as we don't need to pay a fee to ourselves.
  """
  fees: CurrencyAmount

  """
  A list of hops that represent the route from the sender node to the recipient node.
  """
  hops(first: Int = null): OutgoingPaymentAttemptToHopsConnection!

  """The outgoing payment for this attempt."""
  outgoing_payment: OutgoingPayment!
}

"""
Enum that enumerates all the possible status of an outgoing payment attempt.
"""
enum OutgoingPaymentAttemptStatus {
  IN_FLIGHT
  SUCCEEDED
  FAILED
}

"""
The connection from an outgoing payment attempt to the list of sequential hops that define the path from sender node to recipient node.
"""
type OutgoingPaymentAttemptToHopsConnection {
  """
  The total count of objects in this connection, using the current filters. It is different from the number of objects returned in the current page (in the `entities` field).
  """
  count: Int!

  """The hops for the current page of this connection."""
  entities: [Hop!]!
}

"""The connection from outgoing payment to all attempts."""
type OutgoingPaymentToAttemptsConnection {
  """
  The total count of objects in this connection, using the current filters. It is different from the number of objects returned in the current page (in the `entities` field).
  """
  count: Int!

  """The attempts for the current page of this connection."""
  entities: [OutgoingPaymentAttempt!]!
}

type PageInfo {
  has_next_page: Boolean
  has_previous_page: Boolean
  start_cursor: String
  end_cursor: String
}

input PayInvoiceInput {
  """The node from where you want to send the payment."""
  node_id: ID!

  """The invoice you want to pay (as defined by the BOLT11 standard)."""
  encoded_invoice: String!

  """The timeout in seconds that we will try to make the payment."""
  timeout_secs: Int!

  """
  The maximum amount of fees that you want to pay for this payment to be sent, expressed in msats.
  """
  maximum_fees_msats: Long!

  """
  The amount you will pay for this invoice, expressed in msats. It should ONLY be set when the invoice amount is zero.
  """
  amount_msats: Long = null
}

type PayInvoiceOutput {
  """The payment that has been sent."""
  payment: OutgoingPayment!
}

enum PaymentFailureReason {
  NONE
  TIMEOUT
  NO_ROUTE
  ERROR
  INCORRECT_PAYMENT_DETAILS
  INSUFFICIENT_BALANCE
  INVOICE_ALREADY_PAID
  SELF_PAYMENT
  INVOICE_EXPIRED
  RISK_SCREENING_FAILED
}

interface PaymentRequest implements Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when the entity was first created."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!

  """The details of the payment request."""
  data: PaymentRequestData!

  """The status of the payment request."""
  status: PaymentRequestStatus!
}

"""
The interface of a payment request on the Lightning Network (a.k.a. Lightning Invoice).
"""
interface PaymentRequestData {
  encoded_payment_request: String!
  bitcoin_network: BitcoinNetwork!
}

enum PaymentRequestStatus {
  OPEN
  CLOSED
}

enum Permission {
  ALL
  MAINNET_VIEW
  MAINNET_TRANSACT
  MAINNET_MANAGE
  TESTNET_VIEW
  TESTNET_TRANSACT
  TESTNET_MANAGE
  REGTEST_VIEW
  REGTEST_TRANSACT
  REGTEST_MANAGE
  USER_VIEW
  USER_MANAGE
  ACCOUNT_VIEW
  ACCOUNT_MANAGE
}

type Query {
  """Returns the current connected account."""
  current_account: Account

  """
  Returns an estimate of the fees of a transaction on the Bitcoin Network.
  """
  bitcoin_fee_estimate(network: BitcoinNetwork!): FeeEstimate!

  """
  Decodes the content of an encoded payment request into structured data that can be used by the client.
  """
  decoded_payment_request(encoded_payment_request: String!): PaymentRequestData!

  """Returns any `Entity`, identified by its unique ID."""
  entity(id: ID!): Entity

  """
  Returns an estimate of the fees that will be paid for a Lightning invoice.
  """
  lightning_fee_estimate_for_invoice(input: LightningFeeEstimateForInvoiceInput!): LightningFeeEstimateOutput!

  """
  Returns an estimate of the fees that will be paid to send a payment to another Lightning node.
  """
  lightning_fee_estimate_for_node(input: LightningFeeEstimateForNodeInput!): LightningFeeEstimateOutput!
}

input RequestWithdrawalInput {
  """The node from which you'd like to make the withdrawal."""
  node_id: ID!

  """The bitcoin address where the withdrawal should be sent."""
  bitcoin_address: String!

  """
  The amount you want to withdraw from this node in Satoshis. Use the special value -1 to withdrawal all funds from this node.
  """
  amount_sats: Long!

  """The strategy that should be used to withdraw the funds from this node."""
  withdrawal_mode: WithdrawalMode!
}

type RequestWithdrawalOutput {
  """The request that is created for this withdrawal."""
  request: WithdrawalRequest!
}

type RichText {
  text: String!
}

enum RiskRating {
  HIGH_RISK
  LOW_RISK
  UNKNOWN
}

"""
A transaction that was forwarded through a Lightspark node on the Lightning Network.
"""
type RoutingTransaction implements LightningTransaction & Transaction & Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when this transaction was initiated."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!

  """The current status of this transaction."""
  status: TransactionStatus!

  """The date and time when this transaction was completed or failed."""
  resolved_at: DateTime

  """The amount of money involved in this transaction."""
  amount: CurrencyAmount!

  """
  The hash of this transaction, so it can be uniquely identified on the Lightning Network.
  """
  transaction_hash: String

  """If known, the channel this transaction was received from."""
  incoming_channel: Channel

  """If known, the channel this transaction was forwarded to."""
  outgoing_channel: Channel

  """
  The fees collected by the node when routing this transaction. We subtract the outgoing amount to the incoming amount to determine how much fees were collected.
  """
  fees: CurrencyAmount

  """
  If applicable, user-facing error message describing why the routing failed.
  """
  failure_message: RichText

  """If applicable, the reason why the routing failed."""
  failure_reason: RoutingTransactionFailureReason
}

enum RoutingTransactionFailureReason {
  INCOMING_LINK_FAILURE
  OUTGOING_LINK_FAILURE
  FORWARDING_FAILURE
}

input ScreenBitcoinAddressesInput {
  provider: CryptoSanctionsScreeningProvider!
  addresses: [String!]!
}

type ScreenBitcoinAddressesOutput {
  ratings: [RiskRating!]!
}

type Secret {
  encrypted_value: String!
  cipher: String!
}

input SendPaymentInput {
  """The node from where you want to send the payment."""
  node_id: ID!

  """The public key of the destination node."""
  destination_public_key: String!

  """The timeout in seconds that we will try to make the payment."""
  timeout_secs: Int!

  """The amount you will send to the destination node, expressed in msats."""
  amount_msats: Long!

  """
  The maximum amount of fees that you want to pay for this payment to be sent, expressed in msats.
  """
  maximum_fees_msats: Long!
}

type SendPaymentOutput {
  """The payment that has been sent."""
  payment: OutgoingPayment!
}

type Subscription {
  entity(id: ID!): Entity!
  transactions(node_ids: [ID!]!): Transaction!
}

interface Transaction implements Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when this transaction was initiated."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!

  """The current status of this transaction."""
  status: TransactionStatus!

  """The date and time when this transaction was completed or failed."""
  resolved_at: DateTime

  """The amount of money involved in this transaction."""
  amount: CurrencyAmount!

  """
  The hash of this transaction, so it can be uniquely identified on the Lightning Network.
  """
  transaction_hash: String
}

input TransactionFailures {
  payment_failures: [PaymentFailureReason!] = null
  routing_transaction_failures: [RoutingTransactionFailureReason!] = null
}

enum TransactionStatus {
  """Transaction succeeded.."""
  SUCCESS

  """Transaction failed."""
  FAILED

  """Transaction has been initiated and is currently in-flight."""
  PENDING

  """
  For transaction type PAYMENT_REQUEST only. No payments have been made to a payment request.
  """
  NOT_STARTED @deprecated(reason: "Use `PENDING` instead.")

  """
  For transaction type PAYMENT_REQUEST only. A payment request has expired.
  """
  EXPIRED @deprecated(reason: "Transaction type PAYMENT_REQUEST is deprecated.")

  """For transaction type PAYMENT_REQUEST only."""
  CANCELLED @deprecated(reason: "Transaction type PAYMENT_REQUEST is deprecated.")
}

enum TransactionType {
  """Transactions initiated from a Lightspark node on Lightning Network."""
  OUTGOING_PAYMENT

  """Transactions received by a Lightspark node on Lightning Network."""
  INCOMING_PAYMENT

  """
  Transactions that forwarded payments through Lightspark nodes on Lightning Network.
  """
  ROUTED

  """
  Transactions on the Bitcoin blockchain to withdraw funds from a Lightspark node to a Bitcoin wallet.
  """
  L1_WITHDRAW

  """Transactions on Bitcoin blockchain to fund a Lightspark node's wallet."""
  L1_DEPOSIT

  """
  Transactions on Bitcoin blockchain to open a channel on Lightning Network funded by the local Lightspark node.
  """
  CHANNEL_OPEN

  """
  Transactions on Bitcoin blockchain to close a channel on Lightning Network where the balances are allocated back to local and remote nodes.
  """
  CHANNEL_CLOSE

  """Transactions initiated from a Lightspark node on Lightning Network."""
  PAYMENT @deprecated(reason: "Use OUTGOING_PAYMENT instead.")

  """Payment requests from a Lightspark node on Lightning Network"""
  PAYMENT_REQUEST @deprecated(reason: "Use INCOMING_PAYMENT for received payments. To query payment requests, use payment_requests on Account.")

  """
  Transactions that forwarded payments through Lightspark nodes on Lightning Network.
  """
  ROUTE @deprecated(reason: "Use ROUTED instead.")
}

type Wallet implements LightsparkNodeOwner & Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when the entity was first created."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!

  """The date and time when the wallet user last logged in."""
  last_login_at: DateTime

  """The balances that describe the funds in this wallet."""
  balances: Balances

  """
  The unique identifier of this wallet, as provided by the Lightspark Customer during login.
  """
  third_party_identifier: String!

  """The status of this wallet."""
  status: WalletStatus!

  """
  The total amount received in this wallet on Lightning Network within given time period.
  """
  total_amount_received(created_after_date: DateTime = null, created_before_date: DateTime = null): CurrencyAmount!

  """
  The total amount sent in this wallet on Lightning Network within given time period.
  """
  total_amount_sent(created_after_date: DateTime = null, created_before_date: DateTime = null): CurrencyAmount!
}

enum WalletStatus {
  """
  The wallet has not been set up yet and is ready to be deployed. This is the default status after the first login.
  """
  NOT_SETUP

  """
  The wallet is currently being deployed in the Lightspark infrastructure.
  """
  DEPLOYING

  """
  The wallet has been deployed in the Lightspark infrastructure and is ready to be initialized.
  """
  DEPLOYED

  """The wallet is currently being initialized."""
  INITIALIZING

  """The wallet is available and ready to be used."""
  READY

  """
  The wallet is temporarily available, due to a transient issue or a scheduled maintenance.
  """
  UNAVAILABLE

  """
  The wallet had an unrecoverable failure. This status is not expected to happend and will be investigated by the Lightspark team.
  """
  FAILED

  """The wallet is being terminated."""
  TERMINATING

  """
  The wallet has been terminated and is not available in the Lightspark infrastructure anymore. It is not connected to the Lightning network and its funds can only be accessed using the Funds Recovery flow.
  """
  TERMINATED
}

enum WebhookEventType {
  PAYMENT_FINISHED
  NODE_STATUS
  WALLET_STATUS
  WALLET_OUTGOING_PAYMENT_FINISHED
  WALLET_INCOMING_PAYMENT_FINISHED
  WALLET_WITHDRAWAL_FINISHED
  WALLET_FUNDS_RECEIVED
}

"""
The transaction on the Bitcoin blockchain to withdraw funds from the Lightspark node to a Bitcoin wallet.
"""
type Withdrawal implements OnChainTransaction & Transaction & Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when this transaction was initiated."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!

  """The current status of this transaction."""
  status: TransactionStatus!

  """The date and time when this transaction was completed or failed."""
  resolved_at: DateTime

  """The amount of money involved in this transaction."""
  amount: CurrencyAmount!

  """
  The hash of this transaction, so it can be uniquely identified on the Lightning Network.
  """
  transaction_hash: String

  """
  The fees that were paid by the wallet sending the transaction to commit it to the Bitcoin blockchain.
  """
  fees: CurrencyAmount

  """
  The hash of the block that included this transaction. This will be null for unconfirmed transactions.
  """
  block_hash: String

  """
  The height of the block that included this transaction. This will be zero for unconfirmed transactions.
  """
  block_height: Int!

  """The Bitcoin blockchain addresses this transaction was sent to."""
  destination_addresses: [String!]!

  """
  The number of blockchain confirmations for this transaction in real time.
  """
  num_confirmations: Int

  """The Lightspark node this withdrawal originated from."""
  origin: LightsparkNode!
}

enum WithdrawalMode {
  WALLET_ONLY
  WALLET_THEN_CHANNELS
}

type WithdrawalRequest implements Entity {
  """
  The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string.
  """
  id: ID!

  """The date and time when the entity was first created."""
  created_at: DateTime!

  """The date and time when the entity was last updated."""
  updated_at: DateTime!

  """The amount of money that should be withdrawn in this request."""
  amount: CurrencyAmount!

  """
  If the requested amount is `-1` (i.e. everything), this field may contain an estimate of the amount for the withdrawal.
  """
  estimated_amount: CurrencyAmount

  """The bitcoin address where the funds should be sent."""
  bitcoin_address: String!

  """
  The strategy that should be used to withdraw the funds from the account.
  """
  withdrawal_mode: WithdrawalMode!

  """The current status of this withdrawal request."""
  status: WithdrawalRequestStatus!

  """The time at which this request was completed."""
  completed_at: DateTime

  """The withdrawal transaction that has been generated by this request."""
  withdrawal: Withdrawal

  """
  The transactions that have been generated when closing channels to fulfill this withdrawal.
  """
  channel_closing_transactions(
    """The number of channel closing transactions to fetch."""
    first: Int = null
  ): WithdrawalRequestToChannelClosingTransactionsConnection!

  """
  The transactions that have been generated when opening channels to fulfill this withdrawal.
  """
  channel_opening_transactions(
    """The number of channel opening transactions to fetch."""
    first: Int = null
  ): WithdrawalRequestToChannelOpeningTransactionsConnection!
}

enum WithdrawalRequestStatus {
  FAILED
  IN_PROGRESS
  SUCCESSFUL
}

type WithdrawalRequestToChannelClosingTransactionsConnection {
  """
  An object that holds pagination information about the objects in this connection.
  """
  page_info: PageInfo!

  """
  The total count of objects in this connection, using the current filters. It is different from the number of objects returned in the current page (in the `entities` field).
  """
  count: Int!

  """
  The channel closing transactions for the current page of this connection.
  """
  entities: [ChannelClosingTransaction!]!
}

type WithdrawalRequestToChannelOpeningTransactionsConnection {
  """
  An object that holds pagination information about the objects in this connection.
  """
  page_info: PageInfo!

  """
  The total count of objects in this connection, using the current filters. It is different from the number of objects returned in the current page (in the `entities` field).
  """
  count: Int!

  """
  The channel opening transactions for the current page of this connection.
  """
  entities: [ChannelOpeningTransaction!]!
}