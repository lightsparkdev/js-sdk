// Copyright Â©, 2023-present, Lightspark Group, Inc. - All Rights Reserved

import type CurrencyAmount from "./CurrencyAmount.js";
import {
  CurrencyAmountFromJson,
  CurrencyAmountToJson,
} from "./CurrencyAmount.js";
import type PageInfo from "./PageInfo.js";
import { PageInfoFromJson, PageInfoToJson } from "./PageInfo.js";
import type Transaction from "./Transaction.js";
import { TransactionFromJson, TransactionToJson } from "./Transaction.js";

interface AccountToTransactionsConnection {
  /**
   * The total count of objects in this connection, using the current filters.
   * It is different from the number of objects returned in the current page
   * (in the `entities` field).
   **/
  count: number;

  /**
   * An object that holds pagination information about the objects in this
   * connection. *
   */
  pageInfo: PageInfo;

  /** The transactions for the current page of this connection. **/
  entities: Transaction[];

  /** The typename of the object **/
  typename: string;

  /**
   * Profit (or loss) generated by the transactions in this connection,
   * with the set of filters and constraints provided.
   **/
  profitLoss?: CurrencyAmount | undefined;

  /**
   * Average fee earned for the transactions in this connection,
   * with the set of filters and constraints provided.
   **/
  averageFeeEarned?: CurrencyAmount | undefined;

  /**
   * Total amount transacted by the transactions in this connection,
   * with the set of filters and constraints provided.
   **/
  totalAmountTransacted?: CurrencyAmount | undefined;
}

export const AccountToTransactionsConnectionFromJson = (
  obj: any,
): AccountToTransactionsConnection => {
  return {
    count: obj["account_to_transactions_connection_count"],
    pageInfo: PageInfoFromJson(
      obj["account_to_transactions_connection_page_info"],
    ),
    entities: obj["account_to_transactions_connection_entities"].map((e) =>
      TransactionFromJson(e),
    ),
    typename: "AccountToTransactionsConnection",
    profitLoss: !!obj["account_to_transactions_connection_profit_loss"]
      ? CurrencyAmountFromJson(
          obj["account_to_transactions_connection_profit_loss"],
        )
      : undefined,
    averageFeeEarned: !!obj[
      "account_to_transactions_connection_average_fee_earned"
    ]
      ? CurrencyAmountFromJson(
          obj["account_to_transactions_connection_average_fee_earned"],
        )
      : undefined,
    totalAmountTransacted: !!obj[
      "account_to_transactions_connection_total_amount_transacted"
    ]
      ? CurrencyAmountFromJson(
          obj["account_to_transactions_connection_total_amount_transacted"],
        )
      : undefined,
  } as AccountToTransactionsConnection;
};
export const AccountToTransactionsConnectionToJson = (
  obj: AccountToTransactionsConnection,
): any => {
  return {
    __typename: "AccountToTransactionsConnection",
    account_to_transactions_connection_count: obj.count,
    account_to_transactions_connection_page_info: PageInfoToJson(obj.pageInfo),
    account_to_transactions_connection_profit_loss: obj.profitLoss
      ? CurrencyAmountToJson(obj.profitLoss)
      : undefined,
    account_to_transactions_connection_average_fee_earned: obj.averageFeeEarned
      ? CurrencyAmountToJson(obj.averageFeeEarned)
      : undefined,
    account_to_transactions_connection_total_amount_transacted:
      obj.totalAmountTransacted
        ? CurrencyAmountToJson(obj.totalAmountTransacted)
        : undefined,
    account_to_transactions_connection_entities: obj.entities.map((e) =>
      TransactionToJson(e),
    ),
  };
};

export const FRAGMENT = `
fragment AccountToTransactionsConnectionFragment on AccountToTransactionsConnection {
    __typename
    account_to_transactions_connection_count: count
    account_to_transactions_connection_page_info: page_info {
        __typename
        page_info_has_next_page: has_next_page
        page_info_has_previous_page: has_previous_page
        page_info_start_cursor: start_cursor
        page_info_end_cursor: end_cursor
    }
    account_to_transactions_connection_profit_loss: profit_loss {
        __typename
        currency_amount_original_value: original_value
        currency_amount_original_unit: original_unit
        currency_amount_preferred_currency_unit: preferred_currency_unit
        currency_amount_preferred_currency_value_rounded: preferred_currency_value_rounded
        currency_amount_preferred_currency_value_approx: preferred_currency_value_approx
    }
    account_to_transactions_connection_average_fee_earned: average_fee_earned {
        __typename
        currency_amount_original_value: original_value
        currency_amount_original_unit: original_unit
        currency_amount_preferred_currency_unit: preferred_currency_unit
        currency_amount_preferred_currency_value_rounded: preferred_currency_value_rounded
        currency_amount_preferred_currency_value_approx: preferred_currency_value_approx
    }
    account_to_transactions_connection_total_amount_transacted: total_amount_transacted {
        __typename
        currency_amount_original_value: original_value
        currency_amount_original_unit: original_unit
        currency_amount_preferred_currency_unit: preferred_currency_unit
        currency_amount_preferred_currency_value_rounded: preferred_currency_value_rounded
        currency_amount_preferred_currency_value_approx: preferred_currency_value_approx
    }
    account_to_transactions_connection_entities: entities {
        id
    }
}`;

export default AccountToTransactionsConnection;
