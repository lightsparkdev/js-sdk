import LightsparkdevReactNativeCryptoModule from "./LightsparkdevReactNativeCryptoModule";

/**
 * A representation of a key pair generated by the native crypto module.
 *
 * @typedef {Object} ExportedKeys
 * @property {ExportedKey} privateKey The private key of the key pair.
 * @property {ExportedKey} publicKey The public key of the key pair.
 * @property {string} alias The alias of the key pair in the native keystore. This is used to retrieve the key pair
 *     for signing, etc.
 */
export type ExportedKeys = {
  privateKey: ExportedKey;
  publicKey: ExportedKey;
  alias: string;
};

/**
 * A representation of a key generated by the native crypto module.
 * @typedef {Object} ExportedKey
 * @property {string} keyBytes The raw bytes of the key.
 * @property {KeyEncodingFormat} format The format of the key.
 */
export type ExportedKey = {
  keyBytes: string;
  format: KeyEncodingFormat;
};

/**
 * The encoding format of a key.
 */
export type KeyEncodingFormat = "pkcs8" | "spki" | "pkcs1";

/**
 * Generate a key pair for signing and ensures that the private key is stored in the native keystore.
 * After running this function, the alias in the {@link ExportedKeys.alias} property of the returned object can be
 * used to signing messages.
 *
 * You likely want to store the alias in a a persistent local store (like AsyncStorage) so that you can use it later.
 *
 * @returns {Promise<ExportedKeys>} A promise that resolves to an object containing the public and private keys, along
 *     with an alias for the key pair.
 */
export async function generateSigningKeyPair(): Promise<ExportedKeys> {
  return await LightsparkdevReactNativeCryptoModule.generateSigningKeyPair();
}

/**
 * Exports the raw byes of the key pair with the given alias. This should only be used for
 * debugging purposes or for backing up the key pair. Do not keep these bytes in memory for
 * longer than necessary.
 *
 * @param keyAlias The alias of the key to export.
 * @returns {Promise<ExportedKeys>} A promise that resolves to an object containing the public and private keys.
 */
export async function serializeSigningKey(
  keyAlias: string
): Promise<ExportedKeys> {
  return await LightsparkdevReactNativeCryptoModule.serializeSigningKey(
    keyAlias
  );
}

/**
 * Imports a private key into the native keystore.
 *
 * You likely want to store the returned alias in a a persistent local store (like AsyncStorage) so that you can use
 * it later.
 *
 * NOTE: iOS can only import pkcs1 format private keys! Other formats will fail. However, if you're just importing a
 * key that was generated by this native crypto module, it will be in the correct format.
 *
 * @param keyData The raw bytes of the private key to import.
 * @returns {Promise<string>} A promise that resolves to the alias of the imported key pair that can be used to sign
 *     messages.
 */
export async function importPrivateSigningKey(
  keyData: string
): Promise<string> {
  return await LightsparkdevReactNativeCryptoModule.importPrivateSigningKey(
    keyData
  );
}

/**
 * Signs the given data using the private key represented by the given alias.
 *
 * @param keyAlias The alias of the key pair to use for signing.
 * @param data The data to sign in base64 encoded format.
 * @returns {Promise<string>} A promise that resolves to the signature of the given data.
 */
export async function sign(keyAlias: string, data: string): Promise<string> {
  return await LightsparkdevReactNativeCryptoModule.sign(keyAlias, data);
}

/**
 * @returns {Promise<number>} A promise that resolves to a random nonce unsigned 64-bit number.
 */
export async function getNonce(): Promise<number> {
  return await LightsparkdevReactNativeCryptoModule.getNonce();
}
