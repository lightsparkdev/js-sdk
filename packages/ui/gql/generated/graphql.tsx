import { gql } from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** Date with time (isoformat) */
  DateTime: any;
  /** The `Long` scalar type represents a 64 bit integer. */
  Long: any;
};

export type Account = Entity & LightsparkNodeOwner & {
  __typename: 'Account';
  /** The API tokens that can be used to authenticate this account when making API calls or using our SDKs. See the "Authentication" section of our API docs for more details on its usage. */
  api_tokens: AccountToApiTokensConnection;
  /** The details of the balance of the nodes owned by this account on the Bitcoin Network. */
  blockchain_balance?: Maybe<BlockchainBalance>;
  /** The channels between the nodes that belong to this account and other nodes. */
  channels: AccountToChannelsConnection;
  /** A summary metric used to capture how well positioned a node is to send, receive, or route transactions efficiently. Maximizing a node's conductivity helps a nodeâ€™s transactions to be capital efficient. The value is an integer ranging between 0 and 10 (bounds included). */
  conductivity?: Maybe<Scalars['Int']>;
  /** The date and time when the entity was first created. */
  created_at: Scalars['DateTime'];
  /** The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string. */
  id: Scalars['ID'];
  /** The total sum of the channel balances (online and offline) on this node. */
  local_balance?: Maybe<CurrencyAmount>;
  /** The name of this account. */
  name?: Maybe<Scalars['String']>;
  /** The nodes that are managed by this account. */
  nodes: AccountToNodesConnection;
  /** The payment requests that have been generated by the nodes of this account. */
  payment_requests: AccountToPaymentRequestsConnection;
  /** The sum of the channel balances that are available to receive on the nodes of this account. */
  remote_balance?: Maybe<CurrencyAmount>;
  /** The transactions that this account is involved. Those can happen on the lightning network (either as a sender, recipient, router) or on the Bitcoin blockchain (as a sender or a recipient). */
  transactions: AccountToTransactionsConnection;
  /** The date and time when the entity was last updated. */
  updated_at: Scalars['DateTime'];
  /** An integer between 0 and 100 (included) that represents the percentage of uptime for the nodes owned by this account. */
  uptime_percentage?: Maybe<Scalars['Int']>;
  /** The wallets attached to this account. */
  wallets: AccountToWalletsConnection;
};


export type AccountApi_TokensArgs = {
  first?: InputMaybe<Scalars['Int']>;
};


export type AccountBlockchain_BalanceArgs = {
  bitcoin_networks?: InputMaybe<Array<BitcoinNetwork>>;
  node_ids?: InputMaybe<Array<Scalars['ID']>>;
};


export type AccountChannelsArgs = {
  after_date?: InputMaybe<Scalars['DateTime']>;
  before_date?: InputMaybe<Scalars['DateTime']>;
  bitcoin_network: BitcoinNetwork;
  first?: InputMaybe<Scalars['Int']>;
  lightning_node_id?: InputMaybe<Scalars['ID']>;
};


export type AccountConductivityArgs = {
  bitcoin_networks?: InputMaybe<Array<BitcoinNetwork>>;
  node_ids?: InputMaybe<Array<Scalars['ID']>>;
};


export type AccountLocal_BalanceArgs = {
  bitcoin_networks?: InputMaybe<Array<BitcoinNetwork>>;
  node_ids?: InputMaybe<Array<Scalars['ID']>>;
};


export type AccountNodesArgs = {
  bitcoin_networks?: InputMaybe<Array<BitcoinNetwork>>;
  first?: InputMaybe<Scalars['Int']>;
  node_ids?: InputMaybe<Array<Scalars['ID']>>;
};


export type AccountPayment_RequestsArgs = {
  after?: InputMaybe<Scalars['String']>;
  after_date?: InputMaybe<Scalars['DateTime']>;
  before_date?: InputMaybe<Scalars['DateTime']>;
  bitcoin_network?: InputMaybe<BitcoinNetwork>;
  first?: InputMaybe<Scalars['Int']>;
  lightning_node_id?: InputMaybe<Scalars['ID']>;
};


export type AccountRemote_BalanceArgs = {
  bitcoin_networks?: InputMaybe<Array<BitcoinNetwork>>;
  node_ids?: InputMaybe<Array<Scalars['ID']>>;
};


export type AccountTransactionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  after_date?: InputMaybe<Scalars['DateTime']>;
  before_date?: InputMaybe<Scalars['DateTime']>;
  bitcoin_network?: InputMaybe<BitcoinNetwork>;
  exclude_failures?: InputMaybe<TransactionFailures>;
  first?: InputMaybe<Scalars['Int']>;
  lightning_node_id?: InputMaybe<Scalars['ID']>;
  statuses?: InputMaybe<Array<TransactionStatus>>;
  types?: InputMaybe<Array<TransactionType>>;
};


export type AccountUptime_PercentageArgs = {
  after_date?: InputMaybe<Scalars['DateTime']>;
  before_date?: InputMaybe<Scalars['DateTime']>;
  bitcoin_networks?: InputMaybe<Array<BitcoinNetwork>>;
  node_ids?: InputMaybe<Array<Scalars['ID']>>;
};


export type AccountWalletsArgs = {
  first?: InputMaybe<Scalars['Int']>;
};

export type AccountToApiTokensConnection = {
  __typename: 'AccountToApiTokensConnection';
  /** The total count of objects in this connection, using the current filters. It is different from the number of objects returned in the current page (in the `entities` field). */
  count: Scalars['Int'];
  /** The API tokens for the current page of this connection. */
  entities: Array<ApiToken>;
  /** An object that holds pagination information about the objects in this connection. */
  page_info: PageInfo;
};

export type AccountToChannelsConnection = {
  __typename: 'AccountToChannelsConnection';
  /** The total count of objects in this connection, using the current filters. It is different from the number of objects returned in the current page (in the `entities` field). */
  count: Scalars['Int'];
  /** The channels for the current page of this connection. */
  entities: Array<Channel>;
};


export type AccountToChannelsConnectionCountArgs = {
  exclude_failed_closed?: InputMaybe<Scalars['Boolean']>;
};

/** A connection between an account and the nodes it manages. */
export type AccountToNodesConnection = {
  __typename: 'AccountToNodesConnection';
  /** The total count of objects in this connection, using the current filters. It is different from the number of objects returned in the current page (in the `entities` field). */
  count: Scalars['Int'];
  /** The nodes for the current page of this connection. */
  entities: Array<LightsparkNode>;
  /** An object that holds pagination information about the objects in this connection. */
  page_info: PageInfo;
  /** The main purpose for the selected set of nodes. It is automatically determined from the nodes that are selected in this connection and is used for optimization purposes, as well as to determine the variation of the UI that should be presented to the user. */
  purpose?: Maybe<LightsparkNodePurpose>;
};

export type AccountToPaymentRequestsConnection = {
  __typename: 'AccountToPaymentRequestsConnection';
  /** The total count of objects in this connection, using the current filters. It is different from the number of objects returned in the current page (in the `entities` field). */
  count?: Maybe<Scalars['Int']>;
  /** The payment requests for the current page of this connection. */
  entities: Array<PaymentRequest>;
  /** An object that holds pagination information about the objects in this connection. */
  page_info: PageInfo;
};

export type AccountToTransactionsConnection = {
  __typename: 'AccountToTransactionsConnection';
  /** Average fee earned for the transactions in this connection, with the set of filters and constraints provided. */
  average_fee_earned?: Maybe<CurrencyAmount>;
  /** The total count of objects in this connection, using the current filters. It is different from the number of objects returned in the current page (in the `entities` field). */
  count: Scalars['Int'];
  /** The transactions for the current page of this connection. */
  entities: Array<Transaction>;
  /** An object that holds pagination information about the objects in this connection. */
  page_info: PageInfo;
  /** Profit (or loss) generated by the transactions in this connection, with the set of filters and constraints provided. */
  profit_loss?: Maybe<CurrencyAmount>;
  /** Total amount transacted by the transactions in this connection, with the set of filters and constraints provided. */
  total_amount_transacted?: Maybe<CurrencyAmount>;
};

export type AccountToWalletsConnection = {
  __typename: 'AccountToWalletsConnection';
  /** The total count of objects in this connection, using the current filters. It is different from the number of objects returned in the current page (in the `entities` field). */
  count: Scalars['Int'];
  /** The wallets for the current page of this connection. */
  entities: Array<Wallet>;
  /** An object that holds pagination information about the objects in this connection. */
  page_info: PageInfo;
};

export type ApiToken = Entity & {
  __typename: 'ApiToken';
  /** An opaque identifier that should be used as a client_id (or username) in the HTTP Basic Authentication scheme when issuing requests against the Lightspark API. */
  client_id: Scalars['String'];
  /** The date and time when the entity was first created. */
  created_at: Scalars['DateTime'];
  /** The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string. */
  id: Scalars['ID'];
  /** An arbitrary name chosen by the creator of the token to help identify the token in the list of tokens that have been created for the account. */
  name: Scalars['String'];
  /** A list of permissions granted to the token. */
  permissions: Array<Permission>;
  /** The date and time when the entity was last updated. */
  updated_at: Scalars['DateTime'];
};

export type Balances = {
  __typename: 'Balances';
  /**
   * This represents the balance that should be displayed when asked "how much can I send on Lightning right now?".
   *
   * It represents the amount currently available to be sent on the Lightning network. We remove from the balance all the funds that are temporarily locked (e.g. channel reserves).
   */
  available_to_send_balance: CurrencyAmount;
  /**
   * This represents the balance that should be displayed when asked "how much money can I withdraw on the Bitcoin network right now?".
   *
   * It represents the amount currently available to withdraw and is usually equal to the `owned_balance` but it does not include in-flight operations (which would likely succeed and therefore likely make your withdrawal fail).
   */
  available_to_withdraw_balance: CurrencyAmount;
  /**
   * This represents the balance that should be displayed when asked "how much do I own right now?".
   *
   * It represents the amount currently owned, including things that may not be owned soon (e.g. in-flight outgoing payments, in-flight withdrawals, commit fees, etc.). It really is a snapshot of what is officially owned at this instant.
   */
  owned_balance: CurrencyAmount;
};

export enum BitcoinNetwork {
  /** The production version of the Bitcoin Blockchain. */
  Mainnet = 'MAINNET',
  /** A test version of the Bitcoin Blockchain, maintained by Lightspark. */
  Regtest = 'REGTEST',
  /**
   * A test version of the Bitcoin Blockchain, maintained by a centralized organization. Not in use at Lightspark.
   * @deprecated Use REGTEST.
   */
  Signet = 'SIGNET',
  /** A test version of the Bitcoin Blockchain, publically available. */
  Testnet = 'TESTNET'
}

/** This object provides a detailed breakdown of a `LightsparkNode`'s current balance on the Bitcoin Network. */
export type BlockchainBalance = {
  __typename: 'BlockchainBalance';
  /** Funds available for creating channels or withdrawing. */
  available_balance?: Maybe<CurrencyAmount>;
  /** The balance of confirmed UTXOs in the wallet. */
  confirmed_balance?: Maybe<CurrencyAmount>;
  /** The balance that's locked by an on-chain transaction. */
  locked_balance?: Maybe<CurrencyAmount>;
  /** Funds required to be held in reserve for channel bumping. */
  required_reserve?: Maybe<CurrencyAmount>;
  /** The total wallet balance, including unconfirmed UTXOs. */
  total_balance?: Maybe<CurrencyAmount>;
  /** The balance of unconfirmed UTXOs in the wallet. */
  unconfirmed_balance?: Maybe<CurrencyAmount>;
};

/** An object that represents a payment channel between two nodes in the Lightning Network. */
export type Channel = Entity & {
  __typename: 'Channel';
  /** The total amount of funds in this channel, including the channel balance on the local node, the channel balance on the remote node and the on-chain fees to close the channel. */
  capacity?: Maybe<CurrencyAmount>;
  /** The amount to be paid in fees for the current set of commitment transactions. */
  commit_fee?: Maybe<CurrencyAmount>;
  /** The date and time when the entity was first created. */
  created_at: Scalars['DateTime'];
  /** The estimated time to wait for the channel's hash timelock contract to expire when force closing the channel. It is in unit of minutes. */
  estimated_force_closure_wait_minutes?: Maybe<Scalars['Int']>;
  /** The fees charged for routing payments through this channel. */
  fees?: Maybe<ChannelFees>;
  /** The transaction that funded the channel upon channel opening. */
  funding_transaction?: Maybe<ChannelOpeningTransaction>;
  /** The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string. */
  id: Scalars['ID'];
  /** The channel balance on the local node. */
  local_balance?: Maybe<CurrencyAmount>;
  /** The local Lightspark node of the channel. */
  local_node: LightsparkNode;
  /** The channel balance on the local node that is currently allocated to in-progress payments. */
  local_unsettled_balance?: Maybe<CurrencyAmount>;
  /** The channel balance on the remote node. */
  remote_balance?: Maybe<CurrencyAmount>;
  /** If known, the remote node of the channel. */
  remote_node?: Maybe<Node>;
  /** The channel balance on the remote node that is currently allocated to in-progress payments. */
  remote_unsettled_balance?: Maybe<CurrencyAmount>;
  /** The unique identifier of the channel on Lightning Network, which is the location in the chain that the channel was confirmed. The format is <block-height>:<tx-index>:<tx-output>. */
  short_channel_id?: Maybe<Scalars['String']>;
  /** The current status of this channel. */
  status?: Maybe<ChannelStatus>;
  /** The total balance in this channel, including the channel balance on both local and remote nodes. */
  total_balance?: Maybe<CurrencyAmount>;
  /** A connection to all transactions that have occurred on the channel including outgoing payments, incoming payments, routing transactions and on-chain transactions. */
  transactions: ChannelToTransactionsConnection;
  /** The channel balance that is currently allocated to in-progress payments. */
  unsettled_balance?: Maybe<CurrencyAmount>;
  /** The date and time when the entity was last updated. */
  updated_at: Scalars['DateTime'];
  /** An integer between 0 and 100 (included) that represents the percentage of uptime for this channel. */
  uptime_percentage?: Maybe<Scalars['Int']>;
};


/** An object that represents a payment channel between two nodes in the Lightning Network. */
export type ChannelTransactionsArgs = {
  after_date?: InputMaybe<Scalars['DateTime']>;
  before_date?: InputMaybe<Scalars['DateTime']>;
  types?: InputMaybe<Array<TransactionType>>;
};


/** An object that represents a payment channel between two nodes in the Lightning Network. */
export type ChannelUptime_PercentageArgs = {
  after_date?: InputMaybe<Scalars['DateTime']>;
  before_date?: InputMaybe<Scalars['DateTime']>;
};

/** The transaction on Bitcoin blockchain to close a channel on Lightning Network where the balances are allocated back to local and remote nodes. */
export type ChannelClosingTransaction = Entity & OnChainTransaction & Transaction & {
  __typename: 'ChannelClosingTransaction';
  /** The amount of money involved in this transaction. */
  amount: CurrencyAmount;
  /** The hash of the block that included this transaction. This will be null for unconfirmed transactions. */
  block_hash?: Maybe<Scalars['String']>;
  /** The height of the block that included this transaction. This will be zero for unconfirmed transactions. */
  block_height: Scalars['Int'];
  /** If known, the channel this transaction is closing. */
  channel?: Maybe<Channel>;
  /** The date and time when this transaction was initiated. */
  created_at: Scalars['DateTime'];
  /** The Bitcoin blockchain addresses this transaction was sent to. */
  destination_addresses: Array<Scalars['String']>;
  /** The fees that were paid by the wallet sending the transaction to commit it to the Bitcoin blockchain. */
  fees?: Maybe<CurrencyAmount>;
  /** The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string. */
  id: Scalars['ID'];
  /** The number of blockchain confirmations for this transaction in real time. */
  num_confirmations?: Maybe<Scalars['Int']>;
  /** The date and time when this transaction was completed or failed. */
  resolved_at?: Maybe<Scalars['DateTime']>;
  /** The current status of this transaction. */
  status: TransactionStatus;
  /** The hash of this transaction, so it can be uniquely identified on the Lightning Network. */
  transaction_hash?: Maybe<Scalars['String']>;
  /** The date and time when the entity was last updated. */
  updated_at: Scalars['DateTime'];
};

export type ChannelFees = {
  __typename: 'ChannelFees';
  base_fee?: Maybe<CurrencyAmount>;
  fee_rate_per_mil?: Maybe<Scalars['Int']>;
};

/** The transaction on Bitcoin blockchain to open a channel on Lightning Network funded by the local Lightspark node. */
export type ChannelOpeningTransaction = Entity & OnChainTransaction & Transaction & {
  __typename: 'ChannelOpeningTransaction';
  /** The amount of money involved in this transaction. */
  amount: CurrencyAmount;
  /** The hash of the block that included this transaction. This will be null for unconfirmed transactions. */
  block_hash?: Maybe<Scalars['String']>;
  /** The height of the block that included this transaction. This will be zero for unconfirmed transactions. */
  block_height: Scalars['Int'];
  /** If known, the channel this transaction is opening. */
  channel?: Maybe<Channel>;
  /** The date and time when this transaction was initiated. */
  created_at: Scalars['DateTime'];
  /** The Bitcoin blockchain addresses this transaction was sent to. */
  destination_addresses: Array<Scalars['String']>;
  /** The fees that were paid by the wallet sending the transaction to commit it to the Bitcoin blockchain. */
  fees?: Maybe<CurrencyAmount>;
  /** The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string. */
  id: Scalars['ID'];
  /** The number of blockchain confirmations for this transaction in real time. */
  num_confirmations?: Maybe<Scalars['Int']>;
  /** The date and time when this transaction was completed or failed. */
  resolved_at?: Maybe<Scalars['DateTime']>;
  /** The current status of this transaction. */
  status: TransactionStatus;
  /** The hash of this transaction, so it can be uniquely identified on the Lightning Network. */
  transaction_hash?: Maybe<Scalars['String']>;
  /** The date and time when the entity was last updated. */
  updated_at: Scalars['DateTime'];
};

export enum ChannelStatus {
  /** The channel has been closed. Information about the channel is still available for historical purposes but the channel cannot be used anymore. */
  Closed = 'CLOSED',
  /** Something unexpected happened and we cannot determine the status of this channel. Please try again later or contact the support. */
  Error = 'ERROR',
  /** The channel is not available, likely because the peer is not online. */
  Offline = 'OFFLINE',
  /** The channel is online and ready to send and receive funds. */
  Ok = 'OK',
  /** The channel has been created, but the Bitcoin transaction that initiates it still needs to be confirmed on the Bitcoin blockchain. */
  Pending = 'PENDING',
  /** The channel is behaving properly, but its remote balance is much lower than its local balance so it is not balanced properly for receiving funds. */
  UnbalancedForReceive = 'UNBALANCED_FOR_RECEIVE',
  /** The channel is behaving properly, but its remote balance is much higher than its local balance so it is not balanced properly for sending funds out. */
  UnbalancedForSend = 'UNBALANCED_FOR_SEND'
}

export type ChannelToTransactionsConnection = {
  __typename: 'ChannelToTransactionsConnection';
  /** The average fee for the transactions that transited through this channel, according to the filters and constraints of the connection. */
  average_fee?: Maybe<CurrencyAmount>;
  /** The total count of objects in this connection, using the current filters. It is different from the number of objects returned in the current page (in the `entities` field). */
  count: Scalars['Int'];
  /** The total amount transacted for the transactions that transited through this channel, according to the filters and constraints of the connection. */
  total_amount_transacted?: Maybe<CurrencyAmount>;
  /** The total amount of fees for the transactions that transited through this channel, according to the filters and constraints of the connection. */
  total_fees?: Maybe<CurrencyAmount>;
};

export type CreateApiTokenInput = {
  /** An arbitrary name that the user can choose to identify the API token in a list. */
  name: Scalars['String'];
  /** List of permissions to grant to the API token */
  permissions: Array<Permission>;
};

export type CreateApiTokenOutput = {
  __typename: 'CreateApiTokenOutput';
  /** The API Token that has been created. */
  api_token: ApiToken;
  /**
   * The secret that should be used to authenticate against our API.
   * This secret is not stored and will never be available again after this. You must keep this secret secure as it grants access to your account.
   */
  client_secret: Scalars['String'];
};

export type CreateInvoiceInput = {
  amount_msats: Scalars['Long'];
  invoice_type?: InputMaybe<InvoiceType>;
  memo?: InputMaybe<Scalars['String']>;
  node_id: Scalars['ID'];
};

export type CreateInvoiceOutput = {
  __typename: 'CreateInvoiceOutput';
  invoice: Invoice;
};

export type CreateLnurlInvoiceInput = {
  /** The amount for which the invoice should be created, in millisatoshis. */
  amount_msats: Scalars['Long'];
  /** The SHA256 hash of the LNURL metadata payload. This will be present in the h-tag (SHA256 purpose of payment) of the resulting Bolt 11 invoice. */
  metadata_hash: Scalars['String'];
  /** The node from which to create the invoice. */
  node_id: Scalars['ID'];
};

export type CreateNodeWalletAddressInput = {
  node_id: Scalars['ID'];
};

export type CreateNodeWalletAddressOutput = {
  __typename: 'CreateNodeWalletAddressOutput';
  node: LightsparkNode;
  wallet_address: Scalars['String'];
};

export type CreateTestModeInvoiceInput = {
  amount_msats: Scalars['Long'];
  invoice_type?: InputMaybe<InvoiceType>;
  local_node_id: Scalars['ID'];
  memo?: InputMaybe<Scalars['String']>;
};

export type CreateTestModeInvoiceOutput = {
  __typename: 'CreateTestModeInvoiceOutput';
  encoded_payment_request: Scalars['String'];
};

export type CreateTestModePaymentInput = {
  /** The amount you will be paid for this invoice, expressed in msats. It should ONLY be set when the invoice amount is zero. */
  amount_msats?: InputMaybe<Scalars['Long']>;
  /** The invoice you want to be paid (as defined by the BOLT11 standard). */
  encoded_invoice: Scalars['String'];
  /** The node to where you want to send the payment. */
  local_node_id: Scalars['ID'];
};

export type CreateTestModePaymentoutput = {
  __typename: 'CreateTestModePaymentoutput';
  /** The payment that has been sent. */
  payment: OutgoingPayment;
};

/** Represents the value and unit for an amount of currency. */
export type CurrencyAmount = {
  __typename: 'CurrencyAmount';
  /** The original unit of currency for this CurrencyAmount. */
  original_unit: CurrencyUnit;
  /** The original numeric value for this CurrencyAmount. */
  original_value: Scalars['Long'];
  /** The unit of user's preferred currency. */
  preferred_currency_unit: CurrencyUnit;
  /** The approximate float value for this CurrencyAmount in the very base level of user's preferred currency. For example, for USD, the value will be in cents. */
  preferred_currency_value_approx: Scalars['Float'];
  /** The rounded numeric value for this CurrencyAmount in the very base level of user's preferred currency. For example, for USD, the value will be in cents. */
  preferred_currency_value_rounded: Scalars['Long'];
};

export enum CurrencyUnit {
  /** Bitcoin is the cryptocurrency native to the Bitcoin network. It is used as the native medium for value transfer for the Lightning Network. */
  Bitcoin = 'BITCOIN',
  /**
   * 0.000001 (10e-6) Bitcoin or a millionth of a Bitcoin. We recommend using the Satoshi unit instead when possible.
   * @deprecated Use BITCOIN instead.
   */
  Microbitcoin = 'MICROBITCOIN',
  /**
   * 0.001 (10e-3) Bitcoin or a thousandth of a Bitcoin. We recommend using the Satoshi unit instead when possible.
   * @deprecated Use BITCOIN instead.
   */
  Millibitcoin = 'MILLIBITCOIN',
  /** 0.001 Satoshi, or 10e-11 Bitcoin. We recommend using the Satoshi unit instead when possible. */
  Millisatoshi = 'MILLISATOSHI',
  /**
   * 0.000000001 (10e-9) Bitcoin or a billionth of a Bitcoin. We recommend using the Satoshi unit instead when possible.
   * @deprecated Use BITCOIN instead.
   */
  Nanobitcoin = 'NANOBITCOIN',
  /** 0.00000001 (10e-8) Bitcoin or one hundred millionth of a Bitcoin. This is the unit most commonly used in Lightning transactions. */
  Satoshi = 'SATOSHI',
  /** United States Dollar. */
  Usd = 'USD'
}

export type DeleteApiTokenInput = {
  api_token_id: Scalars['ID'];
};

export type DeleteApiTokenOutput = {
  __typename: 'DeleteApiTokenOutput';
  account: Account;
};

/** The transaction on Bitcoin blockchain to fund the Lightspark node's wallet. */
export type Deposit = Entity & OnChainTransaction & Transaction & {
  __typename: 'Deposit';
  /** The amount of money involved in this transaction. */
  amount: CurrencyAmount;
  /** The hash of the block that included this transaction. This will be null for unconfirmed transactions. */
  block_hash?: Maybe<Scalars['String']>;
  /** The height of the block that included this transaction. This will be zero for unconfirmed transactions. */
  block_height: Scalars['Int'];
  /** The date and time when this transaction was initiated. */
  created_at: Scalars['DateTime'];
  /** The recipient Lightspark node this deposit was sent to. */
  destination: LightsparkNode;
  /** The Bitcoin blockchain addresses this transaction was sent to. */
  destination_addresses: Array<Scalars['String']>;
  /** The fees that were paid by the wallet sending the transaction to commit it to the Bitcoin blockchain. */
  fees?: Maybe<CurrencyAmount>;
  /** The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string. */
  id: Scalars['ID'];
  /** The number of blockchain confirmations for this transaction in real time. */
  num_confirmations?: Maybe<Scalars['Int']>;
  /** The date and time when this transaction was completed or failed. */
  resolved_at?: Maybe<Scalars['DateTime']>;
  /** The current status of this transaction. */
  status: TransactionStatus;
  /** The hash of this transaction, so it can be uniquely identified on the Lightning Network. */
  transaction_hash?: Maybe<Scalars['String']>;
  /** The date and time when the entity was last updated. */
  updated_at: Scalars['DateTime'];
};

/** This interface is used by all the entities in the Lightspark systems. It defines a few core fields that are available everywhere. Any object that implements this interface can be queried using the `entity` query and its ID. */
export type Entity = {
  /** The date and time when the entity was first created. */
  created_at: Scalars['DateTime'];
  /** The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string. */
  id: Scalars['ID'];
  /** The date and time when the entity was last updated. */
  updated_at: Scalars['DateTime'];
};

export type FeeEstimate = {
  __typename: 'FeeEstimate';
  fee_fast: CurrencyAmount;
  fee_min: CurrencyAmount;
};

export type FundNodeInput = {
  amount_sats?: InputMaybe<Scalars['Long']>;
  node_id: Scalars['ID'];
};

export type FundNodeOutput = {
  __typename: 'FundNodeOutput';
  amount: CurrencyAmount;
};

/** This is a node on the Lightning Network, managed by a third party. The information about this node is public data that has been obtained by observing the Lightning Network. */
export type GraphNode = Entity & Node & {
  __typename: 'GraphNode';
  /** The addresses that this node has announced for itself on the Lightning Network. */
  addresses: NodeToAddressesConnection;
  /** A name that identifies the node. It has no importance in terms of operating the node, it is just a way to identify and search for commercial services or popular nodes. This alias can be changed at any time by the node operator. */
  alias?: Maybe<Scalars['String']>;
  /** The Bitcoin Network this node is deployed in. */
  bitcoin_network: BitcoinNetwork;
  /** A hexadecimal string that describes a color. For example "#000000" is black, "#FFFFFF" is white. It has no importance in terms of operating the node, it is just a way to visually differentiate nodes. That color can be changed at any time by the node operator. */
  color?: Maybe<Scalars['String']>;
  /** A summary metric used to capture how well positioned a node is to send, receive, or route transactions efficiently. Maximizing a node's conductivity helps a nodeâ€™s transactions to be capital efficient. The value is an integer ranging between 0 and 10 (bounds included). */
  conductivity?: Maybe<Scalars['Int']>;
  /** The date and time when the entity was first created. */
  created_at: Scalars['DateTime'];
  /** The name of this node in the network. It will be the most human-readable option possible, depending on the data available for this node. */
  display_name: Scalars['String'];
  /** The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string. */
  id: Scalars['ID'];
  /** The public key of this node. It acts as a unique identifier of this node in the Lightning Network. */
  public_key?: Maybe<Scalars['String']>;
  /** The date and time when the entity was last updated. */
  updated_at: Scalars['DateTime'];
};


/** This is a node on the Lightning Network, managed by a third party. The information about this node is public data that has been obtained by observing the Lightning Network. */
export type GraphNodeAddressesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  types?: InputMaybe<Array<NodeAddressType>>;
};

/** One hop signifies a payment moving one node ahead on a payment route; a list of sequential hops defines the path from sender node to recipient node for a payment attempt. */
export type Hop = Entity & {
  __typename: 'Hop';
  /** The amount that is to be forwarded to the destination node. */
  amount_to_forward?: Maybe<CurrencyAmount>;
  /** The date and time when the entity was first created. */
  created_at: Scalars['DateTime'];
  /** The destination node of the hop. */
  destination?: Maybe<Node>;
  /** The block height at which an unsettled HTLC is considered expired. */
  expiry_block_height?: Maybe<Scalars['Int']>;
  /** The fees to be collected by the source node for forwarding the payment over the hop. */
  fee?: Maybe<CurrencyAmount>;
  /** The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string. */
  id: Scalars['ID'];
  /** The zero-based index position of this hop in the path */
  index: Scalars['Int'];
  /** The public key of the node to which the hop is bound. */
  public_key?: Maybe<Scalars['String']>;
  /** The date and time when the entity was last updated. */
  updated_at: Scalars['DateTime'];
};

export enum HtlcAttemptFailureCode {
  AmountBelowMinimum = 'AMOUNT_BELOW_MINIMUM',
  ChannelDisabled = 'CHANNEL_DISABLED',
  ExpiryTooFar = 'EXPIRY_TOO_FAR',
  ExpiryTooSoon = 'EXPIRY_TOO_SOON',
  FeeInsufficient = 'FEE_INSUFFICIENT',
  FinalExpiryTooSoon = 'FINAL_EXPIRY_TOO_SOON',
  FinalIncorrectCltvExpiry = 'FINAL_INCORRECT_CLTV_EXPIRY',
  FinalIncorrectHtlcAmount = 'FINAL_INCORRECT_HTLC_AMOUNT',
  IncorrectCltvExpiry = 'INCORRECT_CLTV_EXPIRY',
  IncorrectOrUnknownPaymentDetails = 'INCORRECT_OR_UNKNOWN_PAYMENT_DETAILS',
  IncorrectPaymentAmount = 'INCORRECT_PAYMENT_AMOUNT',
  InternalFailure = 'INTERNAL_FAILURE',
  InvalidOnionHmac = 'INVALID_ONION_HMAC',
  InvalidOnionKey = 'INVALID_ONION_KEY',
  InvalidOnionPayload = 'INVALID_ONION_PAYLOAD',
  InvalidOnionVersion = 'INVALID_ONION_VERSION',
  InvalidRealm = 'INVALID_REALM',
  MppTimeout = 'MPP_TIMEOUT',
  PermanentChannelFailure = 'PERMANENT_CHANNEL_FAILURE',
  PermanentNodeFailure = 'PERMANENT_NODE_FAILURE',
  RequiredChannelFeatureMissing = 'REQUIRED_CHANNEL_FEATURE_MISSING',
  RequiredNodeFeatureMissing = 'REQUIRED_NODE_FEATURE_MISSING',
  TemporaryChannelFailure = 'TEMPORARY_CHANNEL_FAILURE',
  TemporaryNodeFailure = 'TEMPORARY_NODE_FAILURE',
  UnknownFailure = 'UNKNOWN_FAILURE',
  UnknownNextPeer = 'UNKNOWN_NEXT_PEER',
  UnreadableFailure = 'UNREADABLE_FAILURE'
}

/** A transaction that was sent to a Lightspark node on the Lightning Network. */
export type IncomingPayment = Entity & LightningTransaction & Transaction & {
  __typename: 'IncomingPayment';
  /** The amount of money involved in this transaction. */
  amount: CurrencyAmount;
  /** The attempts that have been made for this payment. */
  attempts: IncomingPaymentToAttemptsConnection;
  /** The date and time when this transaction was initiated. */
  created_at: Scalars['DateTime'];
  /** The recipient Lightspark node this payment was sent to. */
  destination: LightsparkNode;
  /** The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string. */
  id: Scalars['ID'];
  /** If known, the Lightspark node this payment originated from. */
  origin?: Maybe<LightsparkNode>;
  /** The optional payment request for this incoming payment, which will be null if the payment is sent through keysend. */
  payment_request?: Maybe<PaymentRequest>;
  /** The date and time when this transaction was completed or failed. */
  resolved_at?: Maybe<Scalars['DateTime']>;
  /** The current status of this transaction. */
  status: TransactionStatus;
  /** The hash of this transaction, so it can be uniquely identified on the Lightning Network. */
  transaction_hash?: Maybe<Scalars['String']>;
  /** The date and time when the entity was last updated. */
  updated_at: Scalars['DateTime'];
};


/** A transaction that was sent to a Lightspark node on the Lightning Network. */
export type IncomingPaymentAttemptsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  statuses?: InputMaybe<Array<IncomingPaymentAttemptStatus>>;
};

/** An attempt for a payment over a route from sender node to recipient node. */
export type IncomingPaymentAttempt = Entity & {
  __typename: 'IncomingPaymentAttempt';
  /** The total amount of that was attempted to send. */
  amount: CurrencyAmount;
  /** The channel this attempt was made on. */
  channel: Channel;
  /** The date and time when the entity was first created. */
  created_at: Scalars['DateTime'];
  /** The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string. */
  id: Scalars['ID'];
  /** The time the incoming payment attempt failed or succeeded. */
  resolved_at?: Maybe<Scalars['DateTime']>;
  /** The status of the incoming payment attempt. */
  status: IncomingPaymentAttemptStatus;
  /** The date and time when the entity was last updated. */
  updated_at: Scalars['DateTime'];
};

/** Enum that enumerates all the possible status of an incoming payment attempt. */
export enum IncomingPaymentAttemptStatus {
  Accepted = 'ACCEPTED',
  Canceled = 'CANCELED',
  Settled = 'SETTLED',
  Unknown = 'UNKNOWN'
}

/** The connection from incoming payment to all attempts. */
export type IncomingPaymentToAttemptsConnection = {
  __typename: 'IncomingPaymentToAttemptsConnection';
  /** The total count of objects in this connection, using the current filters. It is different from the number of objects returned in the current page (in the `entities` field). */
  count: Scalars['Int'];
  /** The incoming payment attempts for the current page of this connection. */
  entities: Array<IncomingPaymentAttempt>;
};

/** This object represents a BOLT #11 invoice (https://github.com/lightning/bolts/blob/master/11-payment-encoding.md) initiated by a Lightspark Node. */
export type Invoice = Entity & PaymentRequest & {
  __typename: 'Invoice';
  /** The total amount that has been paid to this invoice. */
  amount_paid?: Maybe<CurrencyAmount>;
  /** The date and time when the entity was first created. */
  created_at: Scalars['DateTime'];
  /** The details of the invoice. */
  data: InvoiceData;
  /** The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string. */
  id: Scalars['ID'];
  /** The status of the payment request. */
  status: PaymentRequestStatus;
  /** The date and time when the entity was last updated. */
  updated_at: Scalars['DateTime'];
};

/** This object represents the BOLT #11 invoice protocol for Lightning Payments. See https://github.com/lightning/bolts/blob/master/11-payment-encoding.md. */
export type InvoiceData = PaymentRequestData & {
  __typename: 'InvoiceData';
  /** The requested amount in this invoice. If it is equal to 0, the sender should choose the amount to send. */
  amount: CurrencyAmount;
  bitcoin_network: BitcoinNetwork;
  /** The date and time when this invoice was created. */
  created_at: Scalars['DateTime'];
  /** The lightning node that will be paid when fulfilling this invoice. */
  destination: Node;
  encoded_payment_request: Scalars['String'];
  /** The date and time when this invoice will expire. */
  expires_at: Scalars['DateTime'];
  /** A short, UTF-8 encoded, description of the purpose of this invoice. */
  memo?: Maybe<Scalars['String']>;
  /** The payment hash of this invoice. */
  payment_hash: Scalars['String'];
};

export enum InvoiceType {
  /** An AMP (Atomic Multi-path Payment) invoice. */
  Amp = 'AMP',
  /** A standard Bolt 11 invoice. */
  Standard = 'STANDARD'
}

export type LightningFeeEstimateForInvoiceInput = {
  /** If the invoice does not specify a payment amount, then the amount that you wish to pay, expressed in msats. */
  amount_msats?: InputMaybe<Scalars['Long']>;
  /** The invoice you want to pay (as defined by the BOLT11 standard). */
  encoded_payment_request: Scalars['String'];
  /** The node from where you want to send the payment. */
  node_id: Scalars['ID'];
};

export type LightningFeeEstimateForNodeInput = {
  /** The payment amount expressed in msats. */
  amount_msats: Scalars['Long'];
  /** The public key of the node that you want to pay. */
  destination_node_public_key: Scalars['String'];
  /** The node from where you want to send the payment. */
  node_id: Scalars['ID'];
};

export type LightningFeeEstimateOutput = {
  __typename: 'LightningFeeEstimateOutput';
  /** The estimated fees for the payment. */
  fee_estimate: CurrencyAmount;
};

export type LightningTransaction = {
  /** The amount of money involved in this transaction. */
  amount: CurrencyAmount;
  /** The date and time when this transaction was initiated. */
  created_at: Scalars['DateTime'];
  /** The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string. */
  id: Scalars['ID'];
  /** The date and time when this transaction was completed or failed. */
  resolved_at?: Maybe<Scalars['DateTime']>;
  /** The current status of this transaction. */
  status: TransactionStatus;
  /** The hash of this transaction, so it can be uniquely identified on the Lightning Network. */
  transaction_hash?: Maybe<Scalars['String']>;
  /** The date and time when the entity was last updated. */
  updated_at: Scalars['DateTime'];
};

/** This is a node that is managed by Lightspark and is managed within the current connected account. It contains many details about the node configuration, state, and metadata. */
export type LightsparkNode = Entity & Node & {
  __typename: 'LightsparkNode';
  /**
   * The account that owns this LightsparkNode.
   * @deprecated Use owner instead.
   */
  account: Account;
  /** The addresses that this node has announced for itself on the Lightning Network. */
  addresses: NodeToAddressesConnection;
  /** A name that identifies the node. It has no importance in terms of operating the node, it is just a way to identify and search for commercial services or popular nodes. This alias can be changed at any time by the node operator. */
  alias?: Maybe<Scalars['String']>;
  /** The Bitcoin Network this node is deployed in. */
  bitcoin_network: BitcoinNetwork;
  /** The details of the balance of this node on the Bitcoin Network. */
  blockchain_balance?: Maybe<BlockchainBalance>;
  /** The channels that are connected to this node. */
  channels: LightsparkNodeToChannelsConnection;
  /** A hexadecimal string that describes a color. For example "#000000" is black, "#FFFFFF" is white. It has no importance in terms of operating the node, it is just a way to visually differentiate nodes. That color can be changed at any time by the node operator. */
  color?: Maybe<Scalars['String']>;
  /** A summary metric used to capture how well positioned a node is to send, receive, or route transactions efficiently. Maximizing a node's conductivity helps a nodeâ€™s transactions to be capital efficient. The value is an integer ranging between 0 and 10 (bounds included). */
  conductivity?: Maybe<Scalars['Int']>;
  /** The date and time when the entity was first created. */
  created_at: Scalars['DateTime'];
  /** The name of this node in the network. It will be the most human-readable option possible, depending on the data available for this node. */
  display_name: Scalars['String'];
  /** The private key client is using to sign a GraphQL request which will be verified at LND. */
  encrypted_signing_private_key?: Maybe<Secret>;
  /** The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string. */
  id: Scalars['ID'];
  /** The sum of the channel balances (online only) that are available to send on this node. */
  local_balance?: Maybe<CurrencyAmount>;
  /** The owner of this LightsparkNode. */
  owner: LightsparkNodeOwner;
  /** The public key of this node. It acts as a unique identifier of this node in the Lightning Network. */
  public_key?: Maybe<Scalars['String']>;
  /** The main purpose of this node. It is used by Lightspark for optimizations on the node's channels. */
  purpose?: Maybe<LightsparkNodePurpose>;
  /** The sum of the channel balances that are available to receive on this node. */
  remote_balance?: Maybe<CurrencyAmount>;
  /** The current status of this node. */
  status?: Maybe<LightsparkNodeStatus>;
  /** The sum of the balance on the Bitcoin Network, channel balances, and commit fees on this node. */
  total_balance?: Maybe<CurrencyAmount>;
  /** The total sum of the channel balances (online and offline) on this node. */
  total_local_balance?: Maybe<CurrencyAmount>;
  /** The date and time when the entity was last updated. */
  updated_at: Scalars['DateTime'];
};


/** This is a node that is managed by Lightspark and is managed within the current connected account. It contains many details about the node configuration, state, and metadata. */
export type LightsparkNodeAddressesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  types?: InputMaybe<Array<NodeAddressType>>;
};


/** This is a node that is managed by Lightspark and is managed within the current connected account. It contains many details about the node configuration, state, and metadata. */
export type LightsparkNodeChannelsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  statuses?: InputMaybe<Array<ChannelStatus>>;
};

export type LightsparkNodeOwner = {
  /** The date and time when the entity was first created. */
  created_at: Scalars['DateTime'];
  /** The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string. */
  id: Scalars['ID'];
  /** The date and time when the entity was last updated. */
  updated_at: Scalars['DateTime'];
};

export enum LightsparkNodePurpose {
  Receive = 'RECEIVE',
  Routing = 'ROUTING',
  Send = 'SEND'
}

export enum LightsparkNodeStatus {
  Created = 'CREATED',
  Deployed = 'DEPLOYED',
  FailedToDeploy = 'FAILED_TO_DEPLOY',
  Ready = 'READY',
  Started = 'STARTED',
  Stopped = 'STOPPED',
  Syncing = 'SYNCING',
  Terminated = 'TERMINATED',
  Terminating = 'TERMINATING',
  WalletLocked = 'WALLET_LOCKED'
}

export type LightsparkNodeToChannelsConnection = {
  __typename: 'LightsparkNodeToChannelsConnection';
  /** The total count of objects in this connection, using the current filters. It is different from the number of objects returned in the current page (in the `entities` field). */
  count: Scalars['Int'];
  /** The channels for the current page of this connection. */
  entities: Array<Channel>;
  /** An object that holds pagination information about the objects in this connection. */
  page_info: PageInfo;
};

export type Mutation = {
  __typename: 'Mutation';
  /** Creates a new API token that can be used to authenticate requests for this account when using the Lightspark APIs and SDKs. */
  create_api_token: CreateApiTokenOutput;
  /** Generates a Lightning Invoice (follows the Bolt 11 specification) to request a payment from another Lightning Node. If you are in test mode, the generated invoice can only be paid by create_test_mode_payment mutation. */
  create_invoice: CreateInvoiceOutput;
  /** Generates a Lightning Invoice (follows the Bolt 11 specification) to request a payment from another Lightning Node. This should only be used for generating invoices for LNURLs, with `create_invoice` preferred in the general case. */
  create_lnurl_invoice: CreateInvoiceOutput;
  /** Creates a Bitcoin address for the wallet associated with your Lightning Node. You can use this address to send funds to your node. It is a best practice to generate a new wallet address every time you need to send money. You can generate as many wallet addresses as you want. */
  create_node_wallet_address: CreateNodeWalletAddressOutput;
  /** In test mode, generates a Lightning Invoice which can be paid by a local node. */
  create_test_mode_invoice: CreateTestModeInvoiceOutput;
  /** In test mode, simulates a payment from other node to an invoice. */
  create_test_mode_payment: CreateTestModePaymentoutput;
  /** Deletes an existing API token from this account. */
  delete_api_token: DeleteApiTokenOutput;
  /**
   * Adds funds to a Lightspark node on the REGTEST network. If the amount is not specified, 10,000,000 SATOSHI will be added.
   * This API only functions for nodes created on the REGTEST network and will return an error when called for any non-REGTEST node.
   */
  fund_node: FundNodeOutput;
  /** Sends a payment to a node on the Lightning Network, based on the invoice (as defined by the BOLT11 specification) that you provide. If you are in test mode, the invoice has to be generated by create_test_mode_invoice mutation. */
  pay_invoice: PayInvoiceOutput;
  /**
   * Withdraws funds from the account and sends it to the requested bitcoin address.
   *
   * Depending on the chosen mode, it will first take the funds from the wallet, and if applicable, close channels appropriately to recover enough funds and reopen channels with the remaining funds.
   * The process is asynchronous and may take up to a few minutes. You can check the progress by polling the `WithdrawalRequest` that is created, or by subscribing to a webhook.
   */
  request_withdrawal: RequestWithdrawalOutput;
  /** Sends a payment directly to a node on the Lightning Network through the public key of the node without an invoice. */
  send_payment: SendPaymentOutput;
};


export type MutationCreate_Api_TokenArgs = {
  input: CreateApiTokenInput;
};


export type MutationCreate_InvoiceArgs = {
  input: CreateInvoiceInput;
};


export type MutationCreate_Lnurl_InvoiceArgs = {
  input: CreateLnurlInvoiceInput;
};


export type MutationCreate_Node_Wallet_AddressArgs = {
  input: CreateNodeWalletAddressInput;
};


export type MutationCreate_Test_Mode_InvoiceArgs = {
  input: CreateTestModeInvoiceInput;
};


export type MutationCreate_Test_Mode_PaymentArgs = {
  input: CreateTestModePaymentInput;
};


export type MutationDelete_Api_TokenArgs = {
  input: DeleteApiTokenInput;
};


export type MutationFund_NodeArgs = {
  input: FundNodeInput;
};


export type MutationPay_InvoiceArgs = {
  input: PayInvoiceInput;
};


export type MutationRequest_WithdrawalArgs = {
  input: RequestWithdrawalInput;
};


export type MutationSend_PaymentArgs = {
  input: SendPaymentInput;
};

/** This interface represents a lightning node that can be connected to the Lightning Network to send and receive transactions. */
export type Node = {
  /** The addresses that this node has announced for itself on the Lightning Network. */
  addresses: NodeToAddressesConnection;
  /** A name that identifies the node. It has no importance in terms of operating the node, it is just a way to identify and search for commercial services or popular nodes. This alias can be changed at any time by the node operator. */
  alias?: Maybe<Scalars['String']>;
  /** The Bitcoin Network this node is deployed in. */
  bitcoin_network: BitcoinNetwork;
  /** A hexadecimal string that describes a color. For example "#000000" is black, "#FFFFFF" is white. It has no importance in terms of operating the node, it is just a way to visually differentiate nodes. That color can be changed at any time by the node operator. */
  color?: Maybe<Scalars['String']>;
  /** A summary metric used to capture how well positioned a node is to send, receive, or route transactions efficiently. Maximizing a node's conductivity helps a nodeâ€™s transactions to be capital efficient. The value is an integer ranging between 0 and 10 (bounds included). */
  conductivity?: Maybe<Scalars['Int']>;
  /** The date and time when the entity was first created. */
  created_at: Scalars['DateTime'];
  /** The name of this node in the network. It will be the most human-readable option possible, depending on the data available for this node. */
  display_name: Scalars['String'];
  /** The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string. */
  id: Scalars['ID'];
  /** The public key of this node. It acts as a unique identifier of this node in the Lightning Network. */
  public_key?: Maybe<Scalars['String']>;
  /** The date and time when the entity was last updated. */
  updated_at: Scalars['DateTime'];
};


/** This interface represents a lightning node that can be connected to the Lightning Network to send and receive transactions. */
export type NodeAddressesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  types?: InputMaybe<Array<NodeAddressType>>;
};

/** An object that represents the address of a node on the Lightning Network. */
export type NodeAddress = {
  __typename: 'NodeAddress';
  /** The string representation of the address. */
  address: Scalars['String'];
  /** The type, or protocol, of this address. */
  type: NodeAddressType;
};

/** An enum that enumerates all possible types of addresses of a node on the Lightning Network. */
export enum NodeAddressType {
  Ipv4 = 'IPV4',
  Ipv6 = 'IPV6',
  Tor = 'TOR'
}

/** A connection between a node and the addresses it has announced for itself on Lightning Network. */
export type NodeToAddressesConnection = {
  __typename: 'NodeToAddressesConnection';
  /** The total count of objects in this connection, using the current filters. It is different from the number of objects returned in the current page (in the `entities` field). */
  count: Scalars['Int'];
  /** The addresses for the current page of this connection. */
  entities: Array<NodeAddress>;
};

/** Transaction happened on Bitcoin blockchain. */
export type OnChainTransaction = {
  /** The amount of money involved in this transaction. */
  amount: CurrencyAmount;
  /** The hash of the block that included this transaction. This will be null for unconfirmed transactions. */
  block_hash?: Maybe<Scalars['String']>;
  /** The height of the block that included this transaction. This will be zero for unconfirmed transactions. */
  block_height: Scalars['Int'];
  /** The date and time when this transaction was initiated. */
  created_at: Scalars['DateTime'];
  /** The Bitcoin blockchain addresses this transaction was sent to. */
  destination_addresses: Array<Scalars['String']>;
  /** The fees that were paid by the wallet sending the transaction to commit it to the Bitcoin blockchain. */
  fees?: Maybe<CurrencyAmount>;
  /** The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string. */
  id: Scalars['ID'];
  /** The number of blockchain confirmations for this transaction in real time. */
  num_confirmations?: Maybe<Scalars['Int']>;
  /** The date and time when this transaction was completed or failed. */
  resolved_at?: Maybe<Scalars['DateTime']>;
  /** The current status of this transaction. */
  status: TransactionStatus;
  /** The hash of this transaction, so it can be uniquely identified on the Lightning Network. */
  transaction_hash?: Maybe<Scalars['String']>;
  /** The date and time when the entity was last updated. */
  updated_at: Scalars['DateTime'];
};

/** A transaction that was sent from a Lightspark node on the Lightning Network. */
export type OutgoingPayment = Entity & LightningTransaction & Transaction & {
  __typename: 'OutgoingPayment';
  /** The amount of money involved in this transaction. */
  amount: CurrencyAmount;
  /** The attempts that have been made for this payment for possible routes. */
  attempts: OutgoingPaymentToAttemptsConnection;
  /** The date and time when this transaction was initiated. */
  created_at: Scalars['DateTime'];
  /** If known, the final recipient node this payment was sent to. */
  destination?: Maybe<Node>;
  /** If applicable, user-facing error message describing why the payment failed. */
  failure_message?: Maybe<RichText>;
  /** If applicable, the reason why the payment failed. */
  failure_reason?: Maybe<PaymentFailureReason>;
  /** The fees paid by the sender node to send the payment. */
  fees?: Maybe<CurrencyAmount>;
  /** The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string. */
  id: Scalars['ID'];
  /** The Lightspark node this payment originated from. */
  origin: LightsparkNode;
  /** The data of the payment request that was paid by this transaction, if known. */
  payment_request_data?: Maybe<PaymentRequestData>;
  /** The date and time when this transaction was completed or failed. */
  resolved_at?: Maybe<Scalars['DateTime']>;
  /** The current status of this transaction. */
  status: TransactionStatus;
  /** The hash of this transaction, so it can be uniquely identified on the Lightning Network. */
  transaction_hash?: Maybe<Scalars['String']>;
  /** The date and time when the entity was last updated. */
  updated_at: Scalars['DateTime'];
};


/** A transaction that was sent from a Lightspark node on the Lightning Network. */
export type OutgoingPaymentAttemptsArgs = {
  first?: InputMaybe<Scalars['Int']>;
};

/** An attempt for a payment over a route from sender node to recipient node. */
export type OutgoingPaymentAttempt = Entity & {
  __typename: 'OutgoingPaymentAttempt';
  /** The total amount of funds required to complete a payment over this route. This value includes the cumulative fees for each hop. As a result, the attempt extended to the first-hop in the route will need to have at least this much value, otherwise the route will fail at an intermediate node due to an insufficient amount. */
  amount?: Maybe<CurrencyAmount>;
  /** The date and time when the attempt was initiated. */
  created_at: Scalars['DateTime'];
  /** If the payment attempt failed, then this contains the Bolt #4 failure code. */
  failure_code?: Maybe<HtlcAttemptFailureCode>;
  /** If the payment attempt failed, then this contains the index of the hop at which the problem occurred. */
  failure_source_index?: Maybe<Scalars['Int']>;
  /** The sum of the fees paid at each hop within the route of this attempt. In the case of a one-hop payment, this value will be zero as we don't need to pay a fee to ourselves. */
  fees?: Maybe<CurrencyAmount>;
  /** A list of hops that represent the route from the sender node to the recipient node. */
  hops: OutgoingPaymentAttemptToHopsConnection;
  /** The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string. */
  id: Scalars['ID'];
  /** The outgoing payment for this attempt. */
  outgoing_payment: OutgoingPayment;
  /** The time the outgoing payment attempt failed or succeeded. */
  resolved_at?: Maybe<Scalars['DateTime']>;
  /** The status of an outgoing payment attempt. */
  status: OutgoingPaymentAttemptStatus;
  /** The date and time when the entity was last updated. */
  updated_at: Scalars['DateTime'];
};


/** An attempt for a payment over a route from sender node to recipient node. */
export type OutgoingPaymentAttemptHopsArgs = {
  first?: InputMaybe<Scalars['Int']>;
};

/** Enum that enumerates all the possible status of an outgoing payment attempt. */
export enum OutgoingPaymentAttemptStatus {
  Failed = 'FAILED',
  InFlight = 'IN_FLIGHT',
  Succeeded = 'SUCCEEDED'
}

/** The connection from an outgoing payment attempt to the list of sequential hops that define the path from sender node to recipient node. */
export type OutgoingPaymentAttemptToHopsConnection = {
  __typename: 'OutgoingPaymentAttemptToHopsConnection';
  /** The total count of objects in this connection, using the current filters. It is different from the number of objects returned in the current page (in the `entities` field). */
  count: Scalars['Int'];
  /** The hops for the current page of this connection. */
  entities: Array<Hop>;
};

/** The connection from outgoing payment to all attempts. */
export type OutgoingPaymentToAttemptsConnection = {
  __typename: 'OutgoingPaymentToAttemptsConnection';
  /** The total count of objects in this connection, using the current filters. It is different from the number of objects returned in the current page (in the `entities` field). */
  count: Scalars['Int'];
  /** The attempts for the current page of this connection. */
  entities: Array<OutgoingPaymentAttempt>;
};

export type PageInfo = {
  __typename: 'PageInfo';
  end_cursor?: Maybe<Scalars['String']>;
  has_next_page?: Maybe<Scalars['Boolean']>;
  has_previous_page?: Maybe<Scalars['Boolean']>;
  start_cursor?: Maybe<Scalars['String']>;
};

export type PayInvoiceInput = {
  /** The amount you will pay for this invoice, expressed in msats. It should ONLY be set when the invoice amount is zero. */
  amount_msats?: InputMaybe<Scalars['Long']>;
  /** The invoice you want to pay (as defined by the BOLT11 standard). */
  encoded_invoice: Scalars['String'];
  /** The maximum amount of fees that you want to pay for this payment to be sent, expressed in msats. */
  maximum_fees_msats: Scalars['Long'];
  /** The node from where you want to send the payment. */
  node_id: Scalars['ID'];
  /** The timeout in seconds that we will try to make the payment. */
  timeout_secs: Scalars['Int'];
};

export type PayInvoiceOutput = {
  __typename: 'PayInvoiceOutput';
  /** The payment that has been sent. */
  payment: OutgoingPayment;
};

export enum PaymentFailureReason {
  Error = 'ERROR',
  IncorrectPaymentDetails = 'INCORRECT_PAYMENT_DETAILS',
  InsufficientBalance = 'INSUFFICIENT_BALANCE',
  InvoiceAlreadyPaid = 'INVOICE_ALREADY_PAID',
  InvoiceExpired = 'INVOICE_EXPIRED',
  None = 'NONE',
  NoRoute = 'NO_ROUTE',
  RiskScreeningFailed = 'RISK_SCREENING_FAILED',
  SelfPayment = 'SELF_PAYMENT',
  Timeout = 'TIMEOUT'
}

export type PaymentRequest = {
  /** The date and time when the entity was first created. */
  created_at: Scalars['DateTime'];
  /** The details of the payment request. */
  data: PaymentRequestData;
  /** The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string. */
  id: Scalars['ID'];
  /** The status of the payment request. */
  status: PaymentRequestStatus;
  /** The date and time when the entity was last updated. */
  updated_at: Scalars['DateTime'];
};

/** The interface of a payment request on the Lightning Network (a.k.a. Lightning Invoice). */
export type PaymentRequestData = {
  bitcoin_network: BitcoinNetwork;
  encoded_payment_request: Scalars['String'];
};

export enum PaymentRequestStatus {
  Closed = 'CLOSED',
  Open = 'OPEN'
}

export enum Permission {
  AccountManage = 'ACCOUNT_MANAGE',
  AccountView = 'ACCOUNT_VIEW',
  All = 'ALL',
  MainnetManage = 'MAINNET_MANAGE',
  MainnetTransact = 'MAINNET_TRANSACT',
  MainnetView = 'MAINNET_VIEW',
  RegtestManage = 'REGTEST_MANAGE',
  RegtestTransact = 'REGTEST_TRANSACT',
  RegtestView = 'REGTEST_VIEW',
  TestnetManage = 'TESTNET_MANAGE',
  TestnetTransact = 'TESTNET_TRANSACT',
  TestnetView = 'TESTNET_VIEW',
  UserManage = 'USER_MANAGE',
  UserView = 'USER_VIEW'
}

export type Query = {
  __typename: 'Query';
  /** Returns an estimate of the fees of a transaction on the Bitcoin Network. */
  bitcoin_fee_estimate: FeeEstimate;
  /** Returns the current connected account. */
  current_account?: Maybe<Account>;
  /** Decodes the content of an encoded payment request into structured data that can be used by the client. */
  decoded_payment_request: PaymentRequestData;
  /** Returns any `Entity`, identified by its unique ID. */
  entity?: Maybe<Entity>;
  /** Returns an estimate of the fees that will be paid for a Lightning invoice. */
  lightning_fee_estimate_for_invoice: LightningFeeEstimateOutput;
  /** Returns an estimate of the fees that will be paid to send a payment to another Lightning node. */
  lightning_fee_estimate_for_node: LightningFeeEstimateOutput;
};


export type QueryBitcoin_Fee_EstimateArgs = {
  network: BitcoinNetwork;
};


export type QueryDecoded_Payment_RequestArgs = {
  encoded_payment_request: Scalars['String'];
};


export type QueryEntityArgs = {
  id: Scalars['ID'];
};


export type QueryLightning_Fee_Estimate_For_InvoiceArgs = {
  input: LightningFeeEstimateForInvoiceInput;
};


export type QueryLightning_Fee_Estimate_For_NodeArgs = {
  input: LightningFeeEstimateForNodeInput;
};

export type RequestWithdrawalInput = {
  /** The amount you want to withdraw from this node in Satoshis. Use the special value -1 to withdrawal all funds from this node. */
  amount_sats: Scalars['Long'];
  /** The bitcoin address where the withdrawal should be sent. */
  bitcoin_address: Scalars['String'];
  /** The node from which you'd like to make the withdrawal. */
  node_id: Scalars['ID'];
  /** The strategy that should be used to withdraw the funds from this node. */
  withdrawal_mode: WithdrawalMode;
};

export type RequestWithdrawalOutput = {
  __typename: 'RequestWithdrawalOutput';
  /** The request that is created for this withdrawal. */
  request: WithdrawalRequest;
};

export type RichText = {
  __typename: 'RichText';
  text: Scalars['String'];
};

/** A transaction that was forwarded through a Lightspark node on the Lightning Network. */
export type RoutingTransaction = Entity & LightningTransaction & Transaction & {
  __typename: 'RoutingTransaction';
  /** The amount of money involved in this transaction. */
  amount: CurrencyAmount;
  /** The date and time when this transaction was initiated. */
  created_at: Scalars['DateTime'];
  /** If applicable, user-facing error message describing why the routing failed. */
  failure_message?: Maybe<RichText>;
  /** If applicable, the reason why the routing failed. */
  failure_reason?: Maybe<RoutingTransactionFailureReason>;
  /** The fees collected by the node when routing this transaction. We subtract the outgoing amount to the incoming amount to determine how much fees were collected. */
  fees?: Maybe<CurrencyAmount>;
  /** The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string. */
  id: Scalars['ID'];
  /** If known, the channel this transaction was received from. */
  incoming_channel?: Maybe<Channel>;
  /** If known, the channel this transaction was forwarded to. */
  outgoing_channel?: Maybe<Channel>;
  /** The date and time when this transaction was completed or failed. */
  resolved_at?: Maybe<Scalars['DateTime']>;
  /** The current status of this transaction. */
  status: TransactionStatus;
  /** The hash of this transaction, so it can be uniquely identified on the Lightning Network. */
  transaction_hash?: Maybe<Scalars['String']>;
  /** The date and time when the entity was last updated. */
  updated_at: Scalars['DateTime'];
};

export enum RoutingTransactionFailureReason {
  ForwardingFailure = 'FORWARDING_FAILURE',
  IncomingLinkFailure = 'INCOMING_LINK_FAILURE',
  OutgoingLinkFailure = 'OUTGOING_LINK_FAILURE'
}

export type Secret = {
  __typename: 'Secret';
  cipher: Scalars['String'];
  encrypted_value: Scalars['String'];
};

export type SendPaymentInput = {
  /** The amount you will send to the destination node, expressed in msats. */
  amount_msats: Scalars['Long'];
  /** The public key of the destination node. */
  destination_public_key: Scalars['String'];
  /** The maximum amount of fees that you want to pay for this payment to be sent, expressed in msats. */
  maximum_fees_msats: Scalars['Long'];
  /** The node from where you want to send the payment. */
  node_id: Scalars['ID'];
  /** The timeout in seconds that we will try to make the payment. */
  timeout_secs: Scalars['Int'];
};

export type SendPaymentOutput = {
  __typename: 'SendPaymentOutput';
  /** The payment that has been sent. */
  payment: OutgoingPayment;
};

export type Subscription = {
  __typename: 'Subscription';
  entity: Entity;
  transactions: Transaction;
};


export type SubscriptionEntityArgs = {
  id: Scalars['ID'];
};


export type SubscriptionTransactionsArgs = {
  node_ids: Array<Scalars['ID']>;
};

export type Transaction = {
  /** The amount of money involved in this transaction. */
  amount: CurrencyAmount;
  /** The date and time when this transaction was initiated. */
  created_at: Scalars['DateTime'];
  /** The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string. */
  id: Scalars['ID'];
  /** The date and time when this transaction was completed or failed. */
  resolved_at?: Maybe<Scalars['DateTime']>;
  /** The current status of this transaction. */
  status: TransactionStatus;
  /** The hash of this transaction, so it can be uniquely identified on the Lightning Network. */
  transaction_hash?: Maybe<Scalars['String']>;
  /** The date and time when the entity was last updated. */
  updated_at: Scalars['DateTime'];
};

export type TransactionFailures = {
  payment_failures?: InputMaybe<Array<PaymentFailureReason>>;
  routing_transaction_failures?: InputMaybe<Array<RoutingTransactionFailureReason>>;
};

export enum TransactionStatus {
  /**
   * For transaction type PAYMENT_REQUEST only.
   * @deprecated Transaction type PAYMENT_REQUEST is deprecated.
   */
  Cancelled = 'CANCELLED',
  /**
   * For transaction type PAYMENT_REQUEST only. A payment request has expired.
   * @deprecated Transaction type PAYMENT_REQUEST is deprecated.
   */
  Expired = 'EXPIRED',
  /** Transaction failed. */
  Failed = 'FAILED',
  /**
   * For transaction type PAYMENT_REQUEST only. No payments have been made to a payment request.
   * @deprecated Use `PENDING` instead.
   */
  NotStarted = 'NOT_STARTED',
  /** Transaction has been initiated and is currently in-flight. */
  Pending = 'PENDING',
  /** Transaction succeeded.. */
  Success = 'SUCCESS'
}

export enum TransactionType {
  /** Transactions on Bitcoin blockchain to close a channel on Lightning Network where the balances are allocated back to local and remote nodes. */
  ChannelClose = 'CHANNEL_CLOSE',
  /** Transactions on Bitcoin blockchain to open a channel on Lightning Network funded by the local Lightspark node. */
  ChannelOpen = 'CHANNEL_OPEN',
  /** Transactions received by a Lightspark node on Lightning Network. */
  IncomingPayment = 'INCOMING_PAYMENT',
  /** Transactions on Bitcoin blockchain to fund a Lightspark node's wallet. */
  L1Deposit = 'L1_DEPOSIT',
  /** Transactions on the Bitcoin blockchain to withdraw funds from a Lightspark node to a Bitcoin wallet. */
  L1Withdraw = 'L1_WITHDRAW',
  /** Transactions initiated from a Lightspark node on Lightning Network. */
  OutgoingPayment = 'OUTGOING_PAYMENT',
  /**
   * Transactions initiated from a Lightspark node on Lightning Network.
   * @deprecated Use OUTGOING_PAYMENT instead.
   */
  Payment = 'PAYMENT',
  /**
   * Payment requests from a Lightspark node on Lightning Network
   * @deprecated Use INCOMING_PAYMENT for received payments. To query payment requests, use payment_requests on Account.
   */
  PaymentRequest = 'PAYMENT_REQUEST',
  /**
   * Transactions that forwarded payments through Lightspark nodes on Lightning Network.
   * @deprecated Use ROUTED instead.
   */
  Route = 'ROUTE',
  /** Transactions that forwarded payments through Lightspark nodes on Lightning Network. */
  Routed = 'ROUTED'
}

export type Wallet = Entity & LightsparkNodeOwner & {
  __typename: 'Wallet';
  /** The balances that describe the funds in this wallet. */
  balances?: Maybe<Balances>;
  /** The date and time when the entity was first created. */
  created_at: Scalars['DateTime'];
  /** The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string. */
  id: Scalars['ID'];
  /** The date and time when the wallet user last logged in. */
  last_login_at?: Maybe<Scalars['DateTime']>;
  /** The status of this wallet. */
  status: WalletStatus;
  /** The unique identifier of this wallet, as provided by the Lightspark Customer during login. */
  third_party_identifier: Scalars['String'];
  /** The total amount received in this wallet on Lightning Network within given time period. */
  total_amount_received: CurrencyAmount;
  /** The total amount sent in this wallet on Lightning Network within given time period. */
  total_amount_sent: CurrencyAmount;
  /** The date and time when the entity was last updated. */
  updated_at: Scalars['DateTime'];
};


export type WalletTotal_Amount_ReceivedArgs = {
  created_after_date?: InputMaybe<Scalars['DateTime']>;
  created_before_date?: InputMaybe<Scalars['DateTime']>;
};


export type WalletTotal_Amount_SentArgs = {
  created_after_date?: InputMaybe<Scalars['DateTime']>;
  created_before_date?: InputMaybe<Scalars['DateTime']>;
};

export enum WalletStatus {
  /** The wallet has been deployed in the Lightspark infrastructure and is ready to be initialized. */
  Deployed = 'DEPLOYED',
  /** The wallet is currently being deployed in the Lightspark infrastructure. */
  Deploying = 'DEPLOYING',
  /** The wallet had an unrecoverable failure. This status is not expected to happend and will be investigated by the Lightspark team. */
  Failed = 'FAILED',
  /** The wallet is currently being initialized. */
  Initializing = 'INITIALIZING',
  /** The wallet has not been set up yet and is ready to be deployed. This is the default status after the first login. */
  NotSetup = 'NOT_SETUP',
  /** The wallet is available and ready to be used. */
  Ready = 'READY',
  /** The wallet has been terminated and is not available in the Lightspark infrastructure anymore. It is not connected to the Lightning network and its funds can only be accessed using the Funds Recovery flow. */
  Terminated = 'TERMINATED',
  /** The wallet is being terminated. */
  Terminating = 'TERMINATING',
  /** The wallet is temporarily available, due to a transient issue or a scheduled maintenance. */
  Unavailable = 'UNAVAILABLE'
}

export enum WebhookEventType {
  NodeStatus = 'NODE_STATUS',
  PaymentFinished = 'PAYMENT_FINISHED',
  WalletFundsReceived = 'WALLET_FUNDS_RECEIVED',
  WalletIncomingPaymentFinished = 'WALLET_INCOMING_PAYMENT_FINISHED',
  WalletOutgoingPaymentFinished = 'WALLET_OUTGOING_PAYMENT_FINISHED',
  WalletStatus = 'WALLET_STATUS',
  WalletWithdrawalFinished = 'WALLET_WITHDRAWAL_FINISHED'
}

/** The transaction on the Bitcoin blockchain to withdraw funds from the Lightspark node to a Bitcoin wallet. */
export type Withdrawal = Entity & OnChainTransaction & Transaction & {
  __typename: 'Withdrawal';
  /** The amount of money involved in this transaction. */
  amount: CurrencyAmount;
  /** The hash of the block that included this transaction. This will be null for unconfirmed transactions. */
  block_hash?: Maybe<Scalars['String']>;
  /** The height of the block that included this transaction. This will be zero for unconfirmed transactions. */
  block_height: Scalars['Int'];
  /** The date and time when this transaction was initiated. */
  created_at: Scalars['DateTime'];
  /** The Bitcoin blockchain addresses this transaction was sent to. */
  destination_addresses: Array<Scalars['String']>;
  /** The fees that were paid by the wallet sending the transaction to commit it to the Bitcoin blockchain. */
  fees?: Maybe<CurrencyAmount>;
  /** The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string. */
  id: Scalars['ID'];
  /** The number of blockchain confirmations for this transaction in real time. */
  num_confirmations?: Maybe<Scalars['Int']>;
  /** The Lightspark node this withdrawal originated from. */
  origin: LightsparkNode;
  /** The date and time when this transaction was completed or failed. */
  resolved_at?: Maybe<Scalars['DateTime']>;
  /** The current status of this transaction. */
  status: TransactionStatus;
  /** The hash of this transaction, so it can be uniquely identified on the Lightning Network. */
  transaction_hash?: Maybe<Scalars['String']>;
  /** The date and time when the entity was last updated. */
  updated_at: Scalars['DateTime'];
};

export enum WithdrawalMode {
  WalletOnly = 'WALLET_ONLY',
  WalletThenChannels = 'WALLET_THEN_CHANNELS'
}

export type WithdrawalRequest = Entity & {
  __typename: 'WithdrawalRequest';
  /** The amount of money that should be withdrawn in this request. */
  amount: CurrencyAmount;
  /** The bitcoin address where the funds should be sent. */
  bitcoin_address: Scalars['String'];
  /** The transactions that have been generated when closing channels to fulfill this withdrawal. */
  channel_closing_transactions: WithdrawalRequestToChannelClosingTransactionsConnection;
  /** The transactions that have been generated when opening channels to fulfill this withdrawal. */
  channel_opening_transactions: WithdrawalRequestToChannelOpeningTransactionsConnection;
  /** The time at which this request was completed. */
  completed_at?: Maybe<Scalars['DateTime']>;
  /** The date and time when the entity was first created. */
  created_at: Scalars['DateTime'];
  /** If the requested amount is `-1` (i.e. everything), this field may contain an estimate of the amount for the withdrawal. */
  estimated_amount?: Maybe<CurrencyAmount>;
  /** The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string. */
  id: Scalars['ID'];
  /** The current status of this withdrawal request. */
  status: WithdrawalRequestStatus;
  /** The date and time when the entity was last updated. */
  updated_at: Scalars['DateTime'];
  /** The withdrawal transaction that has been generated by this request. */
  withdrawal?: Maybe<Withdrawal>;
  /** The strategy that should be used to withdraw the funds from the account. */
  withdrawal_mode: WithdrawalMode;
};


export type WithdrawalRequestChannel_Closing_TransactionsArgs = {
  first?: InputMaybe<Scalars['Int']>;
};


export type WithdrawalRequestChannel_Opening_TransactionsArgs = {
  first?: InputMaybe<Scalars['Int']>;
};

export enum WithdrawalRequestStatus {
  Failed = 'FAILED',
  InProgress = 'IN_PROGRESS',
  Successful = 'SUCCESSFUL'
}

export type WithdrawalRequestToChannelClosingTransactionsConnection = {
  __typename: 'WithdrawalRequestToChannelClosingTransactionsConnection';
  /** The total count of objects in this connection, using the current filters. It is different from the number of objects returned in the current page (in the `entities` field). */
  count: Scalars['Int'];
  /** The channel closing transactions for the current page of this connection. */
  entities: Array<ChannelClosingTransaction>;
  /** An object that holds pagination information about the objects in this connection. */
  page_info: PageInfo;
};

export type WithdrawalRequestToChannelOpeningTransactionsConnection = {
  __typename: 'WithdrawalRequestToChannelOpeningTransactionsConnection';
  /** The total count of objects in this connection, using the current filters. It is different from the number of objects returned in the current page (in the `entities` field). */
  count: Scalars['Int'];
  /** The channel opening transactions for the current page of this connection. */
  entities: Array<ChannelOpeningTransaction>;
  /** An object that holds pagination information about the objects in this connection. */
  page_info: PageInfo;
};

export type CurrencyAmount_AmountFragment = { __typename: 'CurrencyAmount', original_value: any, original_unit: CurrencyUnit, preferred_currency_unit: CurrencyUnit, preferred_currency_value_rounded: any, preferred_currency_value_approx: number };

export const CurrencyAmount_AmountFragmentDoc = gql`
    fragment CurrencyAmount_amount on CurrencyAmount {
  original_value
  original_unit
  preferred_currency_unit
  preferred_currency_value_rounded
  preferred_currency_value_approx
}
    `;